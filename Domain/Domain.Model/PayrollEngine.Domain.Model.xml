<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PayrollEngine.Domain.Model</name>
    </assembly>
    <members>
        <member name="T:PayrollEngine.Domain.Model.ActionInfo">
            <summary>
            Action info
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Name">
            <summary>The action name</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.FunctionType">
            <summary>The extension function type</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Namespace">
            <summary>The action namespace</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Description">
            <summary>The action description</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Categories">
            <summary>The action categories</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Source">
            <summary>Action source </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Parameters">
            <summary>The action parameters</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionInfo.Issues">
            <summary>The action issues</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ActionInfo.Equals(PayrollEngine.Domain.Model.ActionInfo)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ActionInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.ActionIssueInfo">
            <summary>
            Action issue info
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionIssueInfo.Name">
            <summary>The action issue name</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionIssueInfo.Message">
            <summary>The action issue message</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionIssueInfo.ParameterCount">
            <summary>The action issue description</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ActionIssueInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.ActionParameterInfo">
            <summary>
            Action parameter info
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionParameterInfo.Name">
            <summary>The action parameter name</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionParameterInfo.Description">
            <summary>The action parameter description</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionParameterInfo.ValueTypes">
            <summary>The action parameter types</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionParameterInfo.ValueSources">
            <summary>The action parameter source types</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ActionParameterInfo.ValueReferences">
            <summary>The action parameter reference types</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ActionParameterInfo.Equals(PayrollEngine.Domain.Model.ActionParameterInfo)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ActionParameterInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.AttributeObjectExtensions">
            <summary>
            Class AttributeObjectExtensions
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.AttributeObjectExtensions.CollectDerivedAttributes``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Collect derived attributes
            </summary>
            <param name="objects">The derived object, ordered from the most-derived to the root object</param>
            <param name="attributesFunction">The attributes function</param>
            <returns>The case field name of the duplicate case, null if no duplicate is present</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.AuditDomainObject">
            <summary>
            Represents an audit of a domain object
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.AuditDomainObject.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.AuditDomainObject.#ctor(PayrollEngine.Domain.Model.AuditDomainObject)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Case">
            <summary>
            A national, company and employee case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.CaseType">
            <summary>
            The type of he case (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.Name">
            <summary>
            The case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.NameLocalizations">
            <summary>
            The localized case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.NameSynonyms">
            <summary>
            Synonyms for the case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.Description">
            <summary>
            The case description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.DescriptionLocalizations">
            <summary>
            The localized case descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.DefaultReason">
            <summary>
            The default case change reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.DefaultReasonLocalizations">
            <summary>
            The localized default case change reasons
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.BaseCase">
            <summary>
            The base case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.BaseCaseFields">
            <summary>
            The base case fields
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.CancellationType">
            <summary>
            The cancellation type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.AvailableExpression">
            <summary>
            The expression used to build a case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.BuildExpression">
            <summary>
            The expression used to build the case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.ValidateExpression">
            <summary>
            The expression which evaluates if the case is valid
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.Lookups">
            <summary>
            The case lookups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.Slots">
            <summary>
            The case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.AvailableActions">
            <summary>
            The case available actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.BuildActions">
            <summary>
            The case build actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.ValidateActions">
            <summary>
            The case validate actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.Clusters">
            <summary>
            The case clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.#ctor(PayrollEngine.Domain.Model.Case)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.Equals(PayrollEngine.Domain.Model.Case)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.FromAuditObject(PayrollEngine.Domain.Model.CaseAudit)">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.AvailableScript">
            <summary>
            Test for available script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.BuildScript">
            <summary>
            Test for build script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.ValidateScript">
            <summary>
            Test for validate script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.HasExpression">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Case.HasObjectScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.GetFunctionTypes">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.GetFunctionScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.GetEmbeddedScriptNames">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Case.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseAudit">
            <summary>
            A payroll case audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.CaseId">
            <summary>
            The case id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.CaseType">
            <summary>
            The type of he case (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.Name">
            <summary>
            The case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.NameLocalizations">
            <summary>
            The localized case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.NameSynonyms">
            <summary>
            Synonyms for the case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.Description">
            <summary>
            The case description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.DescriptionLocalizations">
            <summary>
            The localized case descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.BaseCase">
            <summary>
            The base case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.BaseCaseFields">
            <summary>
            The base case fields
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.CancellationType">
            <summary>
            The cancellation type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.DefaultReason">
            <summary>
            The default case change reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.DefaultReasonLocalizations">
            <summary>
            The localized default case change reasons
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.AvailableExpression">
            <summary>
            The expression used to build a case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.BuildExpression">
            <summary>
            The expression used to build a case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.ValidateExpression">
            <summary>
            The expression which evaluates if the case is valid
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.Lookups">
            <summary>
            The lookups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.Slots">
            <summary>
            The case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.AvailableActions">
            <summary>
            The case available actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.BuildActions">
            <summary>
            The case build actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.ValidateActions">
            <summary>
            The case validate actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseAudit.Clusters">
            <summary>
            The case clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseAudit.#ctor(PayrollEngine.Domain.Model.CaseAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseAudit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseChange">
            <summary>
            Case change with multiple case values of one case type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.UserId">
            <summary>
            The change user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.EmployeeId">
            <summary>
            The employee id, mandatory for employee case changes (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.DivisionId">
            <summary>
            The division id (immutable)
            If present, this values overrides all case value divisions  <see cref="P:PayrollEngine.Domain.Model.CaseValue.DivisionId"/>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.CancellationType">
            <summary>
            The cancellation type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.CancellationId">
            <summary>
            The cancellation case id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.CancellationDate">
            <summary>
            The cancellation date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.Reason">
            <summary>
            The change reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.ValidationCaseName">
            <summary>
            The validation case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.Forecast">
            <summary>
            The forecast name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChange.Values">
            <summary>
            The case values
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChange.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChange.#ctor(PayrollEngine.Domain.Model.CaseChange)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChange.Equals(PayrollEngine.Domain.Model.CaseChange)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseChangeCaseValue">
            <summary>
            A case value from a case change used in national, company and employee case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.CaseChangeId">
            <summary>
            The case change id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.CaseChangeCreated">
            <summary>
            The case change creation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.UserId">
            <summary>
            The change user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.UserIdentifier">
            <summary>
            The user unique identifier
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.Reason">
            <summary>
            The change reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.ValidationCaseName">
            <summary>
            The validation case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.CancellationType">
            <summary>
            The cancellation type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.CancellationId">
            <summary>
            The canceled case change id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.Documents">
            <summary>
            The document count
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.ResultKind">
            <summary>
            The result kind
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeCaseValue.ResultValue">
            <summary>
            The result value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeCaseValue.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeCaseValue.#ctor(PayrollEngine.Domain.Model.CaseChangeCaseValue)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeCaseValue.Equals(PayrollEngine.Domain.Model.CaseChangeCaseValue)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseChangeQuery">
            <summary>
            Case change query parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeQuery.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeQuery.Language">
            <summary>
            The language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeQuery.ExcludeGlobal">
            <summary>
            Exclude global changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseChangeSetup">
            <summary>
            Case change setup
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.UserId">
            <summary>
            The change user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.EmployeeId">
            <summary>
            The employee id, mandatory for employee case changes (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.DivisionId">
            <summary>
            The division id (immutable)
            If present, this values overrides all case value divisions <see cref="P:PayrollEngine.Domain.Model.CaseValue.DivisionId"/>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.CancellationId">
            <summary>
            The case to cancel, root case name specifies the target case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.Created">
            <summary>
            Case change created date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.Reason">
            <summary>
            The change reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.Forecast">
            <summary>
            The forecast name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.Case">
            <summary>
            The setup root case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseChangeSetup.Issues">
            <summary>
            The case validation issues
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetup.#ctor">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseChangeSetup"/> class</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetup.#ctor(PayrollEngine.Domain.Model.CaseChangeSetup)">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseChangeSetup"/> class</summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetup.Equals(PayrollEngine.Domain.Model.CaseChangeSetup)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseChangeSetupExtensions">
            <summary>
            Extension methods for the <see cref="T:PayrollEngine.Domain.Model.CaseChangeSetup"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetupExtensions.FindCaseSetup(PayrollEngine.Domain.Model.CaseChangeSetup,System.String,System.String)">
            <summary>
            Find case setup
            </summary>
            <param name="caseChangeSetup">The case change setup</param>
            <param name="caseName">The case name</param>
            <param name="caseSlot">The case slot</param>
            <returns>The case value or null on missing case value</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetupExtensions.FindCaseValue(PayrollEngine.Domain.Model.CaseChangeSetup,System.String,System.String)">
            <summary>
            Find case value
            </summary>
            <param name="caseChangeSetup">The case change setup</param>
            <param name="caseFieldName">The case field name</param>
            <param name="caseSlot">The case slot</param>
            <returns>The case value or null on missing case value</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetupExtensions.FindDuplicatedCaseValue(PayrollEngine.Domain.Model.CaseChangeSetup)">
            <summary>
            Search for duplicated case value
            </summary>
            <param name="caseChangeSetup">The case change setup</param>
            <returns>The duplicated case value, null without duplicates</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetupExtensions.CollectCaseSetups(PayrollEngine.Domain.Model.CaseChangeSetup)">
            <summary>
            Collect all case setups
            </summary>
            <param name="caseChangeSetup">The case change setup</param>
            <returns>List if case setups</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseChangeSetupExtensions.CollectCaseValues(PayrollEngine.Domain.Model.CaseChangeSetup)">
            <summary>
            Collect all case values
            </summary>
            <param name="caseChangeSetup">The case change setup</param>
            <returns>List if case values</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseDocument">
            <summary>
            A case document
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseDocument.Name">
            <summary>
            The document name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseDocument.Content">
            <summary>
            The document content
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseDocument.ContentType">
            <summary>
            The document content type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseDocument"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseDocument.#ctor(PayrollEngine.Domain.Model.CaseDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseDocument"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseDocument.Equals(PayrollEngine.Domain.Model.CaseDocument)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseDocument.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseExtensions">
            <summary>
            Extension methods for the <see cref="T:PayrollEngine.Domain.Model.Case"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseExtensions.ValidateDerivedTypes(System.Collections.Generic.IList{PayrollEngine.Domain.Model.Case})">
            <summary>
            Validate all types from derived case
            </summary>
            <param name="derivedCase">The derived case to validate</param>
            <returns>throws a payroll exception if the derived case is invalid</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseField">
            <summary>
            A case field used in national, company and employee case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.Name">
            <summary>
            The case field name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.NameLocalizations">
            <summary>
            The localized case field names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.Description">
            <summary>
            The case field description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.DescriptionLocalizations">
            <summary>
            The localized case field descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.ValueType">
            <summary>
            The value type of the case field
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.ValueScope">
            <summary>
            The value scope
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.TimeType">
            <summary>
            The date period type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.TimeUnit">
            <summary>
            The date unit type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.PeriodAggregation">
            <summary>
            The period aggregation type for <see cref="F:PayrollEngine.CaseFieldTimeType.Period"/>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.CancellationMode">
            <summary>
            The cancellation mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.ValueCreationMode">
            <summary>
            The case value creation mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.ValueMandatory">
            <summary>
            Mandatory case field value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.Order">
            <summary>
            The case field order
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.StartDateType">
            <summary>
            The start date type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.EndDateType">
            <summary>
            The end date type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.EndMandatory">
            <summary>
            The end date mandatory state
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.DefaultStart">
            <summary>
            The default start value of the case field (date or expression)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.DefaultEnd">
            <summary>
            The default end value of the case field (date or expression)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.DefaultValue">
            <summary>
            The default value of the case field (JSON format)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.Tags">
            <summary>
            The case field tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.LookupSettings">
            <summary>
            The lookup settings
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.Clusters">
            <summary>
            The case field clusters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.BuildActions">
            <summary>
            The case field build actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.ValidateActions">
            <summary>
            The case field validate actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseField.ValueAttributes">
            <summary>
            Custom value attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseField.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseField.#ctor(PayrollEngine.Domain.Model.CaseField)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseField.Equals(PayrollEngine.Domain.Model.CaseField)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseField.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseField.FromAuditObject(PayrollEngine.Domain.Model.CaseFieldAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseField.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseFieldAudit">
            <summary>
            A payroll case field audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.CaseFieldId">
            <summary>
            The case field id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.Name">
            <summary>
            The case field name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.NameLocalizations">
            <summary>
            The localized case field names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.Description">
            <summary>
            The case field description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.DescriptionLocalizations">
            <summary>
            The localized case field descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.ValueType">
            <summary>
            The value type of the case field
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.ValueScope">
            <summary>
            The value scope
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.TimeType">
            <summary>
            The date period type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.TimeUnit">
            <summary>
            The date unit type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.PeriodAggregation">
            <summary>
            The period aggregation type for <see cref="F:PayrollEngine.CaseFieldTimeType.Period"/>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.CancellationMode">
            <summary>
            The cancellation mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.ValueCreationMode">
            <summary>
            The case value creation mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.ValueMandatory">
            <summary>
            Mandatory case field value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.Order">
            <summary>
            The case field order
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.StartDateType">
            <summary>
            The start date type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.EndDateType">
            <summary>
            The end date type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.EndMandatory">
            <summary>
            The end date mandatory state
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.DefaultStart">
            <summary>
            The default start value of the case field (date or expression)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.DefaultEnd">
            <summary>
            The default end value of the case field (date or expression)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.DefaultValue">
            <summary>
            The default value of the case field (JSON format)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.Tags">
            <summary>
            The case field tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.LookupSettings">
            <summary>
            The lookup settings
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.Clusters">
            <summary>
            The case field clusters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.BuildActions">
            <summary>
            The case field build actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.ValidateActions">
            <summary>
            The case field validate actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldAudit.ValueAttributes">
            <summary>
            Custom value attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldAudit.#ctor(PayrollEngine.Domain.Model.CaseFieldAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldAudit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseFieldExtensions">
            <summary>
            Extension methods for the <see cref="T:PayrollEngine.Domain.Model.CaseFieldSet"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldExtensions.ValidateDerivedTypes(System.Collections.Generic.IList{PayrollEngine.Domain.Model.CaseField})">
            <summary>
            Validate all types from derived case field
            </summary>
            <param name="derivedCaseField">The derived case field to validate</param>
            <returns>throws a payroll exception if the derived case field is invalid</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseFieldReference">
            <summary>
            Case field reference
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldReference.Name">
            <summary>
            The case field name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldReference.Order">
            <summary>
            The case field order
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldReference.Equals(PayrollEngine.Domain.Model.CaseFieldReference)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseFieldSet">
            <summary>
            The case field including the slot and values
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.DisplayName">
            <summary>
            The case field display name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.CaseSlot">
            <summary>
            The case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.CaseSlotLocalizations">
            <summary>
            The localized case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.Value">
            <summary>
            The case value (JSON format)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.Start">
            <summary>
            The starting date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.End">
            <summary>
            The ending date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.CancellationDate">
            <summary>
            Cancellation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldSet.HasValue">
            <summary>
            Test for existing value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.#ctor(PayrollEngine.Domain.Model.CaseFieldSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.#ctor(PayrollEngine.Domain.Model.CaseField)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.#ctor(PayrollEngine.Domain.Model.CaseValue)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.Equals(PayrollEngine.Domain.Model.CaseFieldSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.GetValue">
            <summary>
            Get native value
            </summary>
            <returns>The .net value</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.SetValue(System.Object)">
            <summary>
            Set native value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseFieldValue">
            <summary>
            Case field value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.CaseFieldName">
            <summary>
            The case field name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.CaseFieldNameLocalizations">
            <summary>
            The localized case field names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.Created">
            <summary>
            The created date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.Start">
            <summary>
            The period start date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.End">
            <summary>
            The period end date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.ValueType">
            <summary>
            The case value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.Value">
            <summary>
            The case period value as JSON
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.CancellationDate">
            <summary>
            Cancellation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.Tags">
            <summary>
            The case value tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseFieldValue.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldValue.Equals(PayrollEngine.Domain.Model.CaseFieldValue)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldValue.ToString">
            <summary>
            String representation
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseRelation">
            <summary>
            A case field used in national, company and employee
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.SourceCaseName">
            <summary>
            The relation source case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.SourceCaseNameLocalizations">
            <summary>
            The localized source case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.SourceCaseSlot">
            <summary>
            The relation source case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.SourceCaseSlotLocalizations">
            <summary>
            The localized source case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.TargetCaseName">
            <summary>
            The relation target case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.TargetCaseNameLocalizations">
            <summary>
            The localized target case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.TargetCaseSlot">
            <summary>
            The relation target case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.TargetCaseSlotLocalizations">
            <summary>
            The localized target case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.RelationHash">
            <summary>
            The relation key hash code
            The hash is used by database indexes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.BuildExpression">
            <summary>
            The expression used to build the case relation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.ValidateExpression">
            <summary>
            The expression which evaluates if the case relation is valid
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.OverrideType">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.Order">
            <summary>
            The case relation order
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.BuildActions">
            <summary>
            The case relation build actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.ValidateActions">
            <summary>
            The case relation validate actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.Clusters">
            <summary>
            The case relation clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.#ctor(PayrollEngine.Domain.Model.CaseRelation)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.Equals(PayrollEngine.Domain.Model.CaseRelation)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.FromAuditObject(PayrollEngine.Domain.Model.CaseRelationAudit)">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.BuildScript">
            <summary>
            Test for build script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.ValidateScript">
            <summary>
            Test for validate script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.HasExpression">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelation.HasObjectScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.GetFunctionTypes">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.GetFunctionScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.GetEmbeddedScriptNames">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseRelationAudit">
            <summary>
            A payroll case relation audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.CaseRelationId">
            <summary>
            The case relation id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.SourceCaseName">
            <summary>
            The relation source case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.SourceCaseNameLocalizations">
            <summary>
            The localized source case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.SourceCaseSlot">
            <summary>
            The relation source case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.SourceCaseSlotLocalizations">
            <summary>
            The localized source case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.TargetCaseName">
            <summary>
            The relation target case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.TargetCaseNameLocalizations">
            <summary>
            The localized target case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.TargetCaseSlot">
            <summary>
            The relation target case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.TargetCaseSlotLocalizations">
            <summary>
            The localized target case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.RelationHash">
            <summary>
            The relation key hash code
            The hash is used by database indexes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.BuildExpression">
            <summary>
            The expression used to build the case relation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.ValidateExpression">
            <summary>
            The expression which evaluates if the case relation is valid
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.Order">
            <summary>
            The case relation order
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.BuildActions">
            <summary>
            The case relation build actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.ValidateActions">
            <summary>
            The case relation validate actions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationAudit.Clusters">
            <summary>
            The case relation clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelationAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelationAudit.#ctor(PayrollEngine.Domain.Model.CaseRelationAudit)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseRelationReference">
            <summary>
            Case relation reference
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationReference.SourceCaseName">
            <summary>
            The relation source case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationReference.SourceCaseSlot">
            <summary>
            The relation source case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationReference.TargetCaseName">
            <summary>
            The relation target case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseRelationReference.TargetCaseSlot">
            <summary>
            The relation target case slot
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelationReference.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelationReference.#ctor(System.String,System.String)">
            <summary>
            Case constructor
            </summary>
            <param name="sourceCaseName">The relation source case name</param>
            <param name="targetCaseName">The relation target case name</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelationReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Case with slot constructor
            </summary>
            <param name="sourceCaseName">The relation source case name</param>
            <param name="sourceCaseSlot">The relation source case slot</param>
            <param name="targetCaseName">The relation target case name</param>
            <param name="targetCaseSlot">The relation target case slot</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseRelationReference.Equals(PayrollEngine.Domain.Model.CaseRelationReference)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseSet">
            <summary>
            Case including case fields and related cases
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSet.DisplayName">
            <summary>
            The case display name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSet.CaseSlot">
            <summary>
            The case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSet.CaseSlotLocalizations">
            <summary>
            The localized case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSet.CancellationDate">
            <summary>
            Cancellation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSet.Fields">
            <summary>
            Derived case fields
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSet.RelatedCases">
            <summary>
            Related cases
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSet.#ctor(PayrollEngine.Domain.Model.CaseSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSet.#ctor(PayrollEngine.Domain.Model.Case)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSet.Equals(PayrollEngine.Domain.Model.CaseSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseSetExtensions">
            <summary>
            Extension methods for the <see cref="T:PayrollEngine.Domain.Model.CaseSet"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetExtensions.FindCase(PayrollEngine.Domain.Model.CaseSet,System.String)">
            <summary>
            Find case by name, considering related cases
            </summary>
            <param name="caseSet">The case to search</param>
            <param name="caseName">The name of the case</param>
            <returns>The value case field matching the name, null on missing case field</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetExtensions.FindCaseField(PayrollEngine.Domain.Model.CaseSet,System.String)">
            <summary>
            Find case field by name, considering related cases
            </summary>
            <param name="caseSet">The case to search</param>
            <param name="caseFieldName">The name of the case field</param>
            <returns>The value case field matching the name, null on missing case field</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetExtensions.CollectFields(PayrollEngine.Domain.Model.CaseSet)">
            <summary>
            Collect case fields
            </summary>
            <param name="caseSet">The case to collect</param>
            <returns>List of case fields, including fields of related cases</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetExtensions.SetCancellationDate(PayrollEngine.Domain.Model.CaseSet,System.Nullable{System.DateTime})">
            <summary>
            Set the case cancellation date
            </summary>
            <param name="caseSet">The case to setup</param>
            <param name="cancellationDate">The case cancellation date</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseSetup">
            <summary>
            Case setup
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSetup.CaseName">
            <summary>
            The case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSetup.CaseSlot">
            <summary>
            The case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSetup.Values">
            <summary>
            The case value setups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSetup.RelatedCases">
            <summary>
            The related cases
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetup.#ctor">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseSetup"/> class</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetup.#ctor(PayrollEngine.Domain.Model.CaseSetup)">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseSetup"/> class</summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSetup.Equals(PayrollEngine.Domain.Model.CaseSetup)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseSlot">
            <summary>
            Case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSlot.Name">
            <summary>
            The case slot name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseSlot.NameLocalizations">
            <summary>
            The localized case slot names
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseSlot.Equals(PayrollEngine.Domain.Model.CaseSlot)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValidationIssue">
            <summary>
            Represents an issue from the case validation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.IssueType">
            <summary>
            The validation issue type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.Number">
            <summary>
            The issue number (negative issue type)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.CaseName">
            <summary>
            Gets the name of the case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.CaseNameLocalizations">
            <summary>
            The localized case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.CaseSlot">
            <summary>
            The case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.CaseSlotLocalizations">
            <summary>
            The localized case slot names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.CaseFieldName">
            <summary>
            Gets the name of the case field
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.CaseFieldNameLocalizations">
            <summary>
            The localized case field names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.SourceCaseName">
            <summary>
            The relation source case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.SourceCaseNameLocalizations">
            <summary>
            The localized source case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.SourceCaseSlot">
            <summary>
            The relation source case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.SourceCaseSlotLocalizations">
            <summary>
            The localized source case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.TargetCaseName">
            <summary>
            The relation target case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.TargetCaseNameLocalizations">
            <summary>
            The localized target case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.TargetCaseSlot">
            <summary>
            The relation target case slot
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.TargetCaseSlotLocalizations">
            <summary>
            The localized target case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValidationIssue.Message">
            <summary>
            Gets the validation message
            <remarks>No support for localized issue messages.
            Translation should use the issue id and parameters to build the localized message</remarks>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValidationIssue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseValidationIssue"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValidationIssue.#ctor(PayrollEngine.Domain.Model.CaseValidationIssue)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.CaseValidationIssue"/> class
            </summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValidationIssue.Equals(PayrollEngine.Domain.Model.CaseValidationIssue)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValidationIssue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValue">
            <summary>
            A case value used in national, company and employee case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.DivisionId">
            <summary>
            The division id (immutable)
            Mandatory for case values with local value scope <see cref="P:PayrollEngine.Domain.Model.CaseField.ValueScope"/>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.EmployeeId">
            <summary>
            The employee id, mandatory for employee case changes (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseName">
            <summary>
            The associated case name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseNameLocalizations">
            <summary>
            The localized case names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseFieldName">
            <summary>
            The associated case field name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseFieldNameLocalizations">
            <summary>
            The localized case field names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseSlot">
            <summary>
            The case slot (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseSlotLocalizations">
            <summary>
            The localized case slots
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.ValueType">
            <summary>
            The type of the value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.Value">
            <summary>
            The case value (JSON format)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.NumericValue">
            <summary>
            The case numeric value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CaseRelation">
            <summary>
            The case relation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.CancellationDate">
            <summary>
            Cancellation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.Start">
            <summary>
            The starting date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.End">
            <summary>
            The ending date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.Forecast">
            <summary>
            The forecast name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.Tags">
            <summary>
            The case value tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValue.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.#ctor(PayrollEngine.Domain.Model.CaseValue)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.Equals(PayrollEngine.Domain.Model.CaseValue)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.GetValue">
            <summary>
            Get native value
            </summary>
            <returns>The .net value</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.SetValue(System.Object)">
            <summary>
            Set native value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.IsWithing(System.DateTime)">
            <summary>
            Check if a time is withing the case value period
            </summary>
            <param name="moment">The moment to test</param>
            <returns>True, if the case value is relevant for the requested moment</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValueCalculation">
            <summary>Calculation for the case value</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueCalculation.EvaluationDate">
            <summary>The evaluation date</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueCalculation.EvaluationPeriod">
            <summary>The evaluation period</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueCalculation.CaseValuePeriod">
            <summary>The case value period</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueCalculation.CaseValue">
            <summary>The case value</summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValueChange">
            <summary>
            A case value change
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueChange.CaseChangeId">
            <summary>
            The case change id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueChange.CaseValueId">
            <summary>
            The case value id
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueChange.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueChange.#ctor(PayrollEngine.Domain.Model.CaseValueChange)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueChange.Equals(PayrollEngine.Domain.Model.CaseValueChange)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValueExtensions">
            <summary>
            Extensions for case values
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueExtensions.GetPeriod(PayrollEngine.Domain.Model.CaseValue)">
            <summary>
            Get case value date period
            </summary>
            <param name="caseValue">The case value</param>
            <returns>The date period</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueExtensions.GetCaseValueReference(PayrollEngine.Domain.Model.CaseValue)">
            <summary>
            Get case value reference
            </summary>
            <param name="caseValue">The case value</param>
            <returns>The case value reference</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValuePeriodExtensions">
            <summary>
            Extension methods for the <see cref="T:PayrollEngine.Domain.Model.CaseValue"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValuePeriodExtensions.Summary(System.Collections.Generic.IEnumerable{PayrollEngine.Domain.Model.CaseValue})">
            <summary>
            Get summary of case values
            </summary>
            <param name="caseValues">The case values</param>
            <returns>Case value with the summary of the case values</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValueQuery">
            <summary>
            Query by object name parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueQuery.DivisionScope">
            <summary>
            The division scope
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueQuery.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueQuery.CaseName">
            <summary>
            The case name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueQuery.CaseFieldName">
            <summary>
            The case field name
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseValueSetup">
            <summary>
            A national, company and employee case value setup
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CaseValueSetup.Documents">
            <summary>
            Case documents
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueSetup.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueSetup.#ctor(PayrollEngine.Domain.Model.CaseValue)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueSetup.#ctor(PayrollEngine.Domain.Model.CaseValueSetup)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseValueSetup.Equals(PayrollEngine.Domain.Model.CaseValueSetup)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ChildCaseField">
            <summary>
            Child case field
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ChildCaseField.CaseId">
            <summary>
            The case id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ChildCaseField.CaseType">
            <summary>
            The case type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ChildCaseField.Equals(PayrollEngine.Domain.Model.ChildCaseField)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ClusterObjectExtensions">
            <summary>
            Extension methods for clusters />
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ClusterObjectExtensions.AvailableCluster(System.Collections.Generic.IEnumerable{PayrollEngine.Domain.Model.IClusterObject},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Check if a cluster object is available
            </summary>
            <param name="clusterObjects">The cluster objects</param>
            <param name="clusterSet">The cluster set</param>
            <returns>True, if the cluster is available</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ClusterObjectExtensions.AvailableCluster(PayrollEngine.Domain.Model.IClusterObject,PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Check if a cluster object is available
            </summary>
            <param name="clusterObject">The cluster object</param>
            <param name="clusterSet">The cluster set</param>
            <returns>True, if the cluster is available</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ClusterSet">
            <summary>
            Cluster set
            </summary>
        </member>
        <member name="F:PayrollEngine.Domain.Model.ClusterSet.SetNameAll">
            cluster set name for all clusters
        </member>
        <member name="P:PayrollEngine.Domain.Model.ClusterSet.Name">
            <summary>
            The filter name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ClusterSet.IncludeClusters">
            <summary>
            The included clusters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ClusterSet.ExcludeClusters">
            <summary>
            The excluded clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ClusterSet.Equals(PayrollEngine.Domain.Model.ClusterSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Collector">
            <summary>
            A payroll collector
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Name">
            <summary>
            The collector name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.NameLocalizations">
            <summary>
            The localized collector names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.CollectType">
            <summary>
            The collection type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.ValueType">
            <summary>
            The value type, default is value type money
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.CollectorGroups">
            <summary>
            Associated collector groups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Threshold">
            <summary>
            The threshold value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.MinResult">
            <summary>
            The minimum allowed value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.MaxResult">
            <summary>
            The maximum allowed value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.StartExpression">
            <summary>
            Expression used while the collector is started
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.ApplyExpression">
            <summary>
            Expression used while applying a value to the collector
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.EndExpression">
            <summary>
            Expression used while the collector is ended
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Clusters">
            <summary>
            The collector clusters
            </summary>
        </member>
        <member name="F:PayrollEngine.Domain.Model.Collector.MinValue">
            <summary>
            The minimum value allowed
            </summary>
        </member>
        <member name="F:PayrollEngine.Domain.Model.Collector.MaxValue">
            <summary>
            The maximum value allowed
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.ResultThreshold">
            <summary>
            The collected result value restricted against the threshold value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.ResultThresholdSurplus">
            <summary>
            The surplus of the collected result value against the threshold value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Count">
            <summary>
            Collected values count
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Sum">
            <summary>
            The summary of the collected value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Min">
            <summary>
            The minimum collected value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Max">
            <summary>
            The maximum collected value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Average">
            <summary>
            The average of the collected value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.Result">
            <summary>
            The collected result value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.GetValues">
            <summary>
            Gets the collector values
            </summary>
            <returns>The collector values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.SetValues(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Sets the collector values
            </summary>
            <returns>The collector values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.AddValue(System.Decimal)">
            <summary>
            Add a new collector value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.Reset">
            <summary>
            Resets the collector to his initial state
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.#ctor(PayrollEngine.Domain.Model.Collector)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.Equals(PayrollEngine.Domain.Model.Collector)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.FromAuditObject(PayrollEngine.Domain.Model.CollectorAudit)">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.HasExpression">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Collector.HasObjectScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.GetFunctionTypes">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.GetFunctionScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.GetEmbeddedScriptNames">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Collector.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CollectorAudit">
            <summary>
            A payroll collector audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.CollectorId">
            <summary>
            The collector id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.CollectType">
            <summary>
            The collection type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.Name">
            <summary>
            The collector name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.NameLocalizations">
            <summary>
            The localized collector names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.ValueType">
            <summary>
            The value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.CollectorGroups">
            <summary>
            Associated collector groups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.Threshold">
            <summary>
            The threshold value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.MinResult">
            <summary>
            The minimum allowed value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.MaxResult">
            <summary>
            The maximum allowed value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.StartExpression">
            <summary>
            Expression used while the collector is started
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.ApplyExpression">
            <summary>
            Expression used while applying a value to the collector
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.EndExpression">
            <summary>
            Expression used while the collector is ended
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorAudit.Clusters">
            <summary>
            The collector clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorAudit.#ctor(PayrollEngine.Domain.Model.CollectorAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorAudit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CollectorCustomResult">
            <summary>
            Custom collector result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.CollectorResultId">
            <summary>
            The wage type result id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.CollectorName">
            <summary>
            The collector name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.CollectorNameHash">
            <summary>
            The collector name hash (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.CollectorNameLocalizations">
            <summary>
            The localized collector names (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.Source">
            <summary>
            The value source (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.ValueType">
            <summary>
            The value type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.Value">
            <summary>
            The collector custom result value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.Start">
            <summary>
            The period starting date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.StartHash">
            <summary>
            The starting date hash code (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.End">
            <summary>
            The period ending date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.Tags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorCustomResult.Attributes">
            <summary>
            The result attributes (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorCustomResult.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorCustomResult.#ctor(PayrollEngine.Domain.Model.CollectorCustomResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorCustomResult.Equals(PayrollEngine.Domain.Model.CollectorCustomResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorCustomResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CollectorResult">
            <summary>
            A collector result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.PayrollResultId">
            <summary>
            The payroll result id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.CollectorId">
            <summary>
            The collector id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.CollectorName">
            <summary>
            The collector name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.CollectorNameHash">
            <summary>
            The collector name hash (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.CollectorNameLocalizations">
            <summary>
            The localized collector names (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.CollectType">
            <summary>
            The collection type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.ValueType">
            <summary>
            The value type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.Value">
            <summary>
            The collector result value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.Start">
            <summary>
            The starting date for the value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.StartHash">
            <summary>
            The starting date hash code (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.End">
            <summary>
            The ending date for the value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.Tags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResult.Attributes">
            <summary>
            The result attributes (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResult.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResult.#ctor(PayrollEngine.Domain.Model.CollectorResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResult.Equals(PayrollEngine.Domain.Model.CollectorResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CollectorResultQuery">
            <summary>
            Collector result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResultQuery.PayrunJobId">
            <summary>The payrun job id</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResultQuery.ParentPayrunJobId">
            <summary>The The parent job id</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResultQuery.CollectorNames">
            <summary>The collector names</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultQuery.#ctor(PayrollEngine.Domain.Model.CollectorResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CollectorResultSet">
            <summary>
            A collector result set
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.CollectorResultSet.CustomResults">
            <summary>
            The collector custom results (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultSet.#ctor(PayrollEngine.Domain.Model.CollectorResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultSet.#ctor(PayrollEngine.Domain.Model.CollectorResultSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CollectorResultSet.Equals(PayrollEngine.Domain.Model.CollectorResultSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery">
            <summary>
            Consolidated collector result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery.PeriodStarts">
            <summary>The period starts</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery.#ctor(PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery.#ctor(PayrollEngine.Domain.Model.CollectorResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ConsolidatedPayrollResult">
            <summary>
            A consolidated payroll result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ConsolidatedPayrollResult.WageTypeResults">
            <summary>
            The wage type results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ConsolidatedPayrollResult.CollectorResults">
            <summary>
            The collector results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ConsolidatedPayrollResult.PayrunResults">
            <summary>
            The payrun results
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedPayrollResult.Equals(PayrollEngine.Domain.Model.ConsolidatedPayrollResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedPayrollResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery">
            <summary>
            Consolidated payrun result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery.PeriodStarts">
            <summary>The period starts</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery.#ctor(PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery.#ctor(PayrollEngine.Domain.Model.PayrunResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery">
            <summary>
            Consolidated wage type result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery.PeriodStarts">
            <summary>The period starts</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery.#ctor(PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery.#ctor(PayrollEngine.Domain.Model.WageTypeResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.DefaultPayrollCalculatorProvider">
            <summary>
            Default provider for payroll calculators
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DefaultPayrollCalculatorProvider.DefaultCalendar">
            <summary>
            Default calendar
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DefaultPayrollCalculatorProvider.CreateCalculator(PayrollEngine.CalendarCalculationMode,System.Int32,System.Nullable{System.Int32},PayrollEngine.CalendarConfiguration,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.Division">
            <summary>
            A division
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Division.Name">
            <summary>
            The division name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Division.NameLocalizations">
            <summary>
            The localized division names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Division.Culture">
            <summary>
            The culture including the calendar, fallback for employee culture
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Division.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Division.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Division.#ctor(PayrollEngine.Domain.Model.Division)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Division.Equals(PayrollEngine.Domain.Model.Division)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Division.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.DivisionQuery">
            <summary>
            Division query parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DivisionQuery.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.DomainCaseValueQuery">
            <summary>
            Query case value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainCaseValueQuery.ParentId">
            <summary>
            The parent id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainCaseValueQuery.DivisionScope">
            <summary>
            The division scope
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainCaseValueQuery.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainCaseValueQuery.Forecast">
            <summary>
            The forecast name
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.DomainEnumerableExtensions">
            <summary>
            Extension methods for IEnumerable
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainEnumerableExtensions.GetNewestObject``1(System.Collections.Generic.IEnumerable{``0},System.DateTime)">
            <summary>
            Get newest derived object
            </summary>
            <param name="derivedObjects">The objects sorted from leaf to root</param>
            <param name="createdBefore">The object creation date</param>
            <typeparam name="T">The domain object</typeparam>
            <returns></returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainEnumerableExtensions.GetDerivedExpressionObjects``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Get derived script object using a script provider
            </summary>
            <param name="derivedObjects">The objects sorted from leaf to root</param>
            <param name="scriptProvider">Object value provider function</param>
            <typeparam name="T">The domain object</typeparam>
            <returns></returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.DomainObjectBase">
            <summary>
            Represents a domain object, containing an Id and an object status
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainObjectBase.Id">
            <summary>
            The unique object id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainObjectBase.Status">
            <summary>
            The object status: active (default) or inactive
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainObjectBase.Created">
            <summary>
            The date of the domain object creation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.DomainObjectBase.Updated">
            <summary>
            The date which the domain object was last updated
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectBase.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectBase.#ctor(PayrollEngine.Domain.Model.IDomainObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="copySource">The source to copy</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectBase.ToObjectString">
            <summary>Get object string</summary>
            <returns>The object string</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectBase.Equals(PayrollEngine.Domain.Model.IDomainObject)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.DomainObjectExtensions">
            <summary>
            Extension methods for <see cref="T:PayrollEngine.Domain.Model.DomainObjectBase"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectExtensions.HasId(PayrollEngine.Domain.Model.IDomainObject)">
            <summary>
            Check if the domain object has an id
            </summary>
            <param name="domainObject">The domain object</param>
            <returns>True, if the domain object contains an id</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectExtensions.SetCreatedDate(PayrollEngine.Domain.Model.IDomainObject,System.DateTime)">
            <summary>
            Set object created and updated date
            </summary>
            <param name="domainObject">The domain object</param>
            <param name="created">The creation moment</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.DomainObjectExtensions.InitCreatedDate(PayrollEngine.Domain.Model.IDomainObject,System.DateTime)">
            <summary>
            Set object created and updated date
            </summary>
            <param name="domainObject">The domain object</param>
            <param name="created">The creation moment</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Employee">
            <summary>
            A payroll service employee.
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.Identifier">
            <summary>
            The employee unique identifier
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.FirstName">
            <summary>
            The first name of the user
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.LastName">
            <summary>
            The last name of the user
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.Language">
            <summary>
            The employees language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.Divisions">
            <summary>
            Employee division names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.Culture">
            <summary>
            The culture including the calendar, fallback is the division culture
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Employee.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Employee.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Employee.#ctor(PayrollEngine.Domain.Model.Employee)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Employee.Equals(PayrollEngine.Domain.Model.Employee)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Employee.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.EmployeeDivision">
            <summary>
            An employee division
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.EmployeeDivision.EmployeeId">
            <summary>
            The employee id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.EmployeeDivision.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.EmployeeDivision.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.EmployeeDivision.#ctor(PayrollEngine.Domain.Model.EmployeeDivision)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.EmployeeDivision.Equals(PayrollEngine.Domain.Model.EmployeeDivision)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.EmployeeDivision.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.EmployeeExtensions">
            <summary>
            Extension methods for <see cref="T:PayrollEngine.Domain.Model.Employee"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.EmployeeExtensions.InDivision(PayrollEngine.Domain.Model.Employee,System.String)">
            <summary>
            Test if an employee is in a division
            </summary>
            <param name="employee">The employee</param>
            <param name="divisionName">The name of the division</param>
            <returns>True if the employee is associated with the division, otherwise false</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ICaseValueCache">
            <summary>
            Cache for case values for a specific evaluation date and period
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ICaseValueCache.GetCaseValueSlotsAsync(System.String)">
            <summary>
            Get all case value slots
            </summary>
            <param name="caseFieldName">The case field name</param>
            <returns>The case value slots</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ICaseValueCache.GetCaseValuesAsync(System.String)">
            <summary>
            Get all case values before the evaluation date
            </summary>
            <param name="caseFieldName">The case field name</param>
            <returns>The case values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ICaseValueCache.GetCasePeriodValuesAsync(System.String)">
            <summary>
            Get all case values before the evaluation date and withing a certain time period
            </summary>
            <param name="caseFieldName">The case field name</param>
            <returns>The case period values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ICaseValueCache.GetRetroCaseValueAsync(System.String,PayrollEngine.DatePeriod)">
            <summary>
            Get retro case values from a certain time period
            </summary>
            <param name="caseFieldName">The case field name</param>
            <param name="period">The date period</param>
            <returns>The retro case value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IClusterObject">
            <summary>
            Object containing clusters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IClusterObject.Clusters">
            <summary>
            The clusters
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IDbContext">
            <summary>Database context</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDbContext.DateTimeType">
            <summary>The date time type name</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDbContext.DecimalType">
            <summary>The decimal type name</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IDbContext.QueryAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a query asynchronously using Task.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of <typeparamref name="T"/>; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IDbContext.QueryFirstAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IDbContext.QuerySingleAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IDbContext.ExecuteAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command asynchronously using Task.
            </summary>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="transaction">The transaction to use for this query.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IDbContext.ExecuteScalarAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param>
            <param name="transaction">The transaction to use for this command.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The first cell returned, as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IDbContext.TransformException(System.Exception)">
            <summary>Transform a database exception</summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IDerivableObject">
            <summary>
            Represents a derivable object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDerivableObject.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IDomainAttributeObject">
            <summary>
            Object containing attributes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IDomainObject">
            <summary>
            Object containing settings
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDomainObject.Id">
            <summary>
            Unique object id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDomainObject.Status">
            <summary>
            The object status: active (default) or inactive
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDomainObject.Created">
            <summary>
            The date of the domain object creation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IDomainObject.Updated">
            <summary>
            The date which the domain object was last updated
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IIdentifiableObject">
            <summary>
            Represents an identifiable object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IIdentifiableObject.Identifier">
            <summary>
            The object identifier
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.INamedObject">
            <summary>
            Represents an named object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.INamedObject.Name">
            <summary>
            The object name
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IPayrollCalculator">
            <summary>
            Represents a calculator for case values
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IPayrollCalculator.GetPayrunPeriod(System.DateTime)">
            <summary>
            Get payrun period from a specific moment
            </summary>
            <param name="periodMoment">The moment within the payrun period</param>
            <returns>The payroll period</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IPayrollCalculator.GetPayrunCycle(System.DateTime)">
            <summary>
            Get payrun cycle from a specific moment
            </summary>
            <param name="cycleMoment">The moment within the payrun cycle</param>
            <returns>The payroll cycle</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IPayrollCalculator.CalculateCasePeriodValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <summary>
            Calculate the case period value over a time period
            </summary>
            <param name="calculation">The calculation</param>
            <returns>The case period value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IPayrollCalculatorProvider">
            <summary>
            Provider for payroll calculators
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IPayrollCalculatorProvider.CreateCalculator(PayrollEngine.CalendarCalculationMode,System.Int32,System.Nullable{System.Int32},PayrollEngine.CalendarConfiguration,System.Globalization.CultureInfo)">
            <summary>
            Create a case value calculator bases on the calculation mode
            </summary>
            <param name="calculationMode">The calendar calculation mode</param>
            <param name="tenantId">The tenant id</param>
            <param name="userId">The user id</param>
            <param name="culture">The culture to use</param>
            <param name="calendar">The calendar configuration</param>
            <returns>The case value calculator</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IRegulationLookupProvider">
            <summary>
            Provides a lookup
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IRegulationLookupProvider.GetLookupValueDataAsync(PayrollEngine.Domain.Model.IDbContext,System.String,System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get a derived lookup value
            </summary>
            <param name="context">The database context</param>
            <param name="lookupName">The name of the lookup</param>
            <param name="lookupKey">The lookup value key</param>
            <param name="language">The value language</param>
            <returns>The lookup value</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IRegulationLookupProvider.GetRangeLookupValueDataAsync(PayrollEngine.Domain.Model.IDbContext,System.String,System.Decimal,System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get a derived range lookup value
            </summary>
            <param name="context">The database context</param>
            <param name="lookupName">The name of the lookup</param>
            <param name="rangeValue">The range value</param>
            <param name="lookupKey">The lookup key</param>
            <param name="language">The value language</param>
            <returns>The lookup value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IScriptObject">
            <summary>
            Represents a scripting domain object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IScriptObject.Script">
            <summary>
            The script text
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IScriptObject.ScriptVersion">
            <summary>
            The script version
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IScriptObject.Binary">
            <summary>
            The script bits
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IScriptObject.ScriptHash">
            <summary>
            The script hash value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IScriptObject.HasExpression">
            <summary>
            True, if any expression is available
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.IScriptObject.HasObjectScripts">
            <summary>
            True, if object scripts are supported
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IScriptObject.GetFunctionTypes">
            <summary>
            Get supported function types
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IScriptObject.Clear">
            <summary>
            Clear script
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IScriptObject.GetEmbeddedScriptNames">
            <summary>
            Get embedded scripts
            </summary>
            <returns>Name list of embedded scripts</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IScriptObject.GetFunctionScripts">
            <summary>
            Get object function scripts
            </summary>
            <returns>Object scripts by function type</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IScriptProvider">
            <summary>
            A script provider
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IScriptProvider.GetBinaryAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.IScriptObject)">
            <summary>
            Get script binary
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ITagObject">
            <summary>
            Object containing tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ITagObject.Tags">
            <summary>Object tags</summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.IWebhookDispatchService">
            <summary>
            Webhook dispatcher service
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IWebhookDispatchService.InvokeAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,PayrollEngine.Domain.Model.WebhookDispatchMessage,System.Nullable{System.Int32})">
            <summary>
            Invoke webhook and receive the response object
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="dispatchMessage">The dispatch message</param>
            <param name="userId">The user id</param>
            <returns>The webhook response object as JSON</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.IWebhookDispatchService.SendMessageAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,PayrollEngine.Domain.Model.WebhookDispatchMessage,System.Nullable{System.Int32})">
            <summary>
            Send message to the webhook
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="dispatchMessage">The dispatch message</param>
            <param name="userId">The user id</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Log">
            <summary>
            A log
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.Level">
            <summary>
            The log level (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.Message">
            <summary>
            The log message name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.User">
            <summary>
            The log user (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.Error">
            <summary>
            The log error (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.Comment">
            <summary>
            The log comment (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.Owner">
            <summary>
            The log owner (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Log.OwnerType">
            <summary>
            The log owner type (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Log.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Log.#ctor(PayrollEngine.Domain.Model.Log)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Log.Equals(PayrollEngine.Domain.Model.Log)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Log.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Lookup">
            <summary>
            A value lookup
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.Name">
            <summary>
            The lookup name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.NameLocalizations">
            <summary>
            The localized lookup names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.Description">
            <summary>
            The lookup description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.DescriptionLocalizations">
            <summary>
            The localized lookup descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.RangeSize">
            <summary>
            The lookup range size
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Lookup.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Lookup.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Lookup.#ctor(PayrollEngine.Domain.Model.Lookup)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Lookup.Equals(PayrollEngine.Domain.Model.Lookup)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Lookup.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Lookup.FromAuditObject(PayrollEngine.Domain.Model.LookupAudit)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupAudit">
            <summary>
            A payroll lookup audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.LookupId">
            <summary>
            The case relation id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.Name">
            <summary>
            The lookup name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.NameLocalizations">
            <summary>
            The localized lookup names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.Description">
            <summary>
            The regulation description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.DescriptionLocalizations">
            <summary>
            The localized regulation descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.RangeSize">
            <summary>
            The lookup range size
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupAudit.#ctor(PayrollEngine.Domain.Model.LookupAudit)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupData">
            <summary>
            A value lookup in a specific language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupData.Name">
            <summary>
            The lookup name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupData.Language">
            <summary>
            The language of the values
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupData.Values">
            <summary>
            The lookup values
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupData.RangeSize">
            <summary>
            The lookup range size
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupData.#ctor(PayrollEngine.Domain.Model.LookupData)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source to copy</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupData.Equals(PayrollEngine.Domain.Model.LookupData)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupSet">
            <summary>
            Lookup including the lookup value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupSet.Values">
            <summary>
            The lookup values
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSet.#ctor(PayrollEngine.Domain.Model.LookupSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSet.Equals(PayrollEngine.Domain.Model.LookupSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupSettings">
            <summary>
            The lookup settings
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupSettings.LookupName">
            <summary>
            The lookup name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupSettings.ValueFieldName">
            <summary>
            The lookup value field name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupSettings.TextFieldName">
            <summary>
            The lookup text/display field name
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSettings.#ctor(PayrollEngine.Domain.Model.LookupSettings)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSettings.Equals(PayrollEngine.Domain.Model.LookupSettings)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupSettings.ToString">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupValue">
            <summary>
            Represents a value within a lookup
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.Key">
            <summary>
            The lookup value key
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.KeyHash">
            <summary>
            The lookup key hash code
            The hash is used by database indexes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.RangeValue">
            <summary>
            The lookup range value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.Value">
            <summary>
            The lookup value as JSON
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.ValueLocalizations">
            <summary>
            The localized lookup values
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.LookupHash">
            <summary>
            The lookup hash code: combined key with range value
            The hash is used by database indexes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValue.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValue.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValue.#ctor(PayrollEngine.Domain.Model.LookupValue)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValue.Equals(PayrollEngine.Domain.Model.LookupValue)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValue.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValue.FromAuditObject(PayrollEngine.Domain.Model.LookupValueAudit)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupValueAudit">
            <summary>
            A payroll case relation audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.LookupValueId">
            <summary>
            The case relation id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.Key">
            <summary>
            The lookup value key
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.KeyHash">
            <summary>
            The lookup key hash code
            The hash is used by database indexes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.RangeValue">
            <summary>
            The lookup range value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.Value">
            <summary>
            The lookup value as JSON
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.ValueLocalizations">
            <summary>
            The localized lookup values
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.LookupHash">
            <summary>
            The lookup hash code
            The hash is used by database indexes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValueAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValueAudit.#ctor(PayrollEngine.Domain.Model.LookupValueAudit)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.LookupValueData">
            <summary>
            Lookup value data in a specific language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueData.Key">
            <summary>
            The lookup key
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueData.Value">
            <summary>
            The lookup value as JSON
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.LookupValueData.RangeValue">
            <summary>
            The lookup range value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValueData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValueData.#ctor(PayrollEngine.Domain.Model.LookupValueData)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source to copy</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValueData.Equals(PayrollEngine.Domain.Model.LookupValueData)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.LookupValueData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthAverageDayPayrollCalculator">
            <summary>Case value calculator by month average days (e.g. 30 days)</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthAverageDayPayrollCalculator.AverageMonthDays">
            <summary>Average month days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthAverageDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthAverageDayPayrollCalculator.CalculateValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthAverageWorkDayPayrollCalculator">
            <summary>Case value calculator by average working days</summary>
            TODO: check case when month average is 30 days and two periods with total 31 days -> create 100%+ values
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthAverageWorkDayPayrollCalculator.AverageWorkDays">
            <summary>Average work days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthAverageWorkDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthAverageWorkDayPayrollCalculator.CalculateValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthCalendarDayPayrollCalculator">
            <summary>Case value calculator by month calendar days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthCalendarDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthCalendarDayPayrollCalculator.CalculateValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthDayPayrollCalculator">
            <summary>Case value calculator by month calendar days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthDayPayrollCalculator.CalculatePeriodValue(PayrollEngine.Domain.Model.CaseValueCalculation,System.Decimal)">
            <summary>Calculate period value by days in month</summary>
            <param name="calculation">The calculation</param>
            <param name="daysInMonth">The number of days in the month</param>
            <returns>The period value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthEffectiveWorkDayPayrollCalculator">
            <summary>Case value calculator by effective month working day</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthEffectiveWorkDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthEffectiveWorkDayPayrollCalculator.CalculateValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthPayrollCalculator">
            <summary>Case value calculator by month calendar days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollCalculator.GetPayrunPeriod(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollCalculator.GetPayrunCycle(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthPayrollPeriod">
            <summary>Payroll month period</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthPayrollPeriod.Calendar">
            <summary>The payroll calendar</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollPeriod.#ctor(PayrollEngine.IPayrollCalendar,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollPeriod.#ctor(PayrollEngine.IPayrollCalendar,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.MonthPayrollPeriod"/> class</summary>
            <param name="calendar">The calendar</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthPayrollPeriod.Start">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthPayrollPeriod.End">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthPayrollPeriod.Name">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollPeriod.GetPayrollPeriod(System.DateTime,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthPayrollPeriod.ToString">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.MonthWorkDayPayrollCalculator">
            <summary>Case value calculator by month calendar days</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.MonthWorkDayPayrollCalculator.WorkingDays">
            <summary>List of working days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthWorkDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.MonthWorkDayPayrollCalculator.CalculatePeriodValue(PayrollEngine.Domain.Model.CaseValueCalculation,System.Decimal)">
            <summary>Calculate period value by days in month</summary>
            <param name="calculation">The calculation</param>
            <param name="daysInMonth">The number of days in the month</param>
            <returns>The period value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Payroll">
            <summary>
            A payroll
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.Name">
            <summary>
            The payroll name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.NameLocalizations">
            <summary>
            The localized payroll names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.Description">
            <summary>
            The payroll description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.DescriptionLocalizations">
            <summary>
            The localized payroll descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.DivisionId">
            <summary>
            The division id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.CalendarCalculationMode">
            <summary>
            The calendar calculation mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.Country">
            <summary>
            The ISO 3166-1 country code, 0 for undefined
            <remarks>See <see cref="P:PayrollEngine.Domain.Model.Payroll.Country"/></remarks>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetCase">
            <summary>
            The case cluster set (undefined: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetCaseField">
            <summary>
            The case field cluster set (undefined: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetCollector">
            <summary>
            The collector cluster set (undefined: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetCollectorRetro">
            <summary>
            The collector cluster set for retro payrun jobs (undefined: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetWageType">
            <summary>
            The wage type cluster set (undefined: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetWageTypeRetro">
            <summary>
            The wage type cluster set for retro payrun jobs (undefined: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetCaseValue">
            <summary>
            The case value cluster set (undefined: none, *: all)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSetWageTypePeriod">
            <summary>
            The wage type period result cluster set (undefined: none)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.ClusterSets">
            <summary>
            Cluster sets
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payroll.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payroll.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payroll.#ctor(PayrollEngine.Domain.Model.Payroll)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payroll.Equals(PayrollEngine.Domain.Model.Payroll)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payroll.GetClusterSet(System.String)">
            <summary>
            Get cluster set
            </summary>
            <param name="clusterSetName">The cluster set name</param>
            <returns>The cluster set</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payroll.ClusterSetExists(System.String)">
            <summary>
            Test if cluster set exists
            </summary>
            <param name="clusterSetName">The cluster set name</param>
            <returns>True, if the cluster set exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payroll.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollCalculatorBase">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCalculatorBase.Calendar">
            <summary>The payroll calendar</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollCalculatorBase.#ctor(PayrollEngine.IPayrollCalendar)">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.PayrollCalculatorBase"/> class</summary>
            <param name="calendar">The payroll calendar</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollCalculatorBase.GetPayrunPeriod(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollCalculatorBase.GetPayrunCycle(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollCalculatorBase.CalculateCasePeriodValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollCalculatorBase.CalculateValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <summary>Custom value calculation</summary>
            <param name="calculation">The calculation</param>
            <returns>The case period value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollCaseChangeQuery">
            <summary>
            Payroll case change query parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCaseChangeQuery.UserId">
            <summary>
            The user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCaseChangeQuery.CaseType">
            <summary>
            The case type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCaseChangeQuery.EmployeeId">
            <summary>
            The employeeId id, mandatory for employee case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCaseChangeQuery.ClusterSetName">
            <summary>
            The cluster set name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCaseChangeQuery.RegulationDate">
            <summary>
            The regulation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollCaseChangeQuery.EvaluationDate">
            <summary>
            The evaluation date
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollLayer">
            <summary>
            A payroll layer
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollLayer.Level">
            <summary>
            The layer level
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollLayer.Priority">
            <summary>
            The layer priority (default: 1)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollLayer.RegulationName">
            <summary>
            The regulation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollLayer.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollLayer.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollLayer.#ctor(PayrollEngine.Domain.Model.PayrollLayer)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollLayer.Equals(PayrollEngine.Domain.Model.PayrollLayer)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollLayer.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollPeriodExtensions">
            <summary>
            Extension methods for <see cref="T:PayrollEngine.IPayrollPeriod"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollPeriodExtensions.GetDatePeriod(PayrollEngine.IPayrollPeriod)">
            <summary>Get date period</summary>
            <param name="payrollPeriod">The payrun period</param>
            <returns>Date period</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollPeriodExtensions.GetOffsetDatePeriod(PayrollEngine.IPayrollPeriod,System.Int32)">
            <summary>
            Get offset period
            </summary>
            <param name="payrollPeriod">The payrun period</param>
            <param name="offset">The period offset count</param>
            <returns>Offset period</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollPeriodExtensions.GetContinuePeriods(PayrollEngine.IPayrollPeriod,System.DateTime,System.Int32)">
            <summary>
            Get all periods between this period and the period containing the target moment
            The starting payrun period is not included
            The payrun period containing the target moment is included
            </summary>
            <param name="payrollPeriod">The payrun period</param>
            <param name="targetMoment">Target moment</param>
            <param name="maxCount">Maximum result count</param>
            <returns>Payrun periods between this and the target moment,
            sorted from the oldest to the newest one</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollQuery">
            <summary>
            Query for the payroll controller
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollQuery.TenantId">
            <summary>
            The tenant id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollQuery.PayrollId">
            <summary>
            The payroll id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollQuery.EmployeeId">
            <summary>
            The employee id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollQuery.RegulationDate">
            <summary>
            The regulation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollQuery.EvaluationDate">
            <summary>
            The evaluation date
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollResult">
            <summary>
            A payroll result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.PayrollId">
            <summary>
            The payroll id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.PayrunId">
            <summary>
            The payrun id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.PayrunJobId">
            <summary>
            The payrun job id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.EmployeeId">
            <summary>
            The employee id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.DivisionId">
            <summary>
            The division id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.CycleName">
            <summary>
            The cycle name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.CycleStart">
            <summary>
            The cycle start date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.CycleEnd">
            <summary>
            The cycle end date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.PeriodName">
            <summary>
            The period name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.PeriodStart">
            <summary>
            The period start date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResult.PeriodEnd">
            <summary>
            The period end date (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResult.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResult.#ctor(PayrollEngine.Domain.Model.PayrollResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResult.Equals(PayrollEngine.Domain.Model.PayrollResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollResultQuery">
            <summary>
            Payroll result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.TenantId">
            <summary>The tenant id</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.EmployeeId">
            <summary>The employee id</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.DivisionId">
            <summary>The division id</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.Period">
            <summary>The period</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.Forecast">
            <summary>The forecast name</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.Tags">
            <summary>The result tags</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.JobStatus">
            <summary>The payrun job status</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultQuery.EvaluationDate">
            <summary>The evaluation date (default: UTC now)</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollResultSet">
            <summary>
            A payroll result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultSet.WageTypeResults">
            <summary>
            The wage type results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultSet.CollectorResults">
            <summary>
            The collector results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultSet.PayrunResults">
            <summary>
            The payrun results
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultSet.#ctor(PayrollEngine.Domain.Model.PayrollResultSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultSet.Equals(PayrollEngine.Domain.Model.PayrollResultSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollResultSetExtensions">
            <summary>
            Payroll result extensions
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultSetExtensions.SetResultDate(PayrollEngine.Domain.Model.PayrollResultSet,System.DateTime)">
            <summary>
            Set creation date for all results
            </summary>
            <param name="payrollResultSet">The payroll result set</param>
            <param name="moment">The moment to set</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultSetExtensions.AddTags(PayrollEngine.Domain.Model.PayrollResultSet,System.Collections.Generic.List{System.String})">
            <summary>
            Add tags to all results
            </summary>
            <param name="payrollResultSet">The payroll result set</param>
            <param name="tags">The tags to add</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrollResultValue">
            <summary>
            Payroll result value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PayrollResultId">
            <summary>
            The payroll result id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.Created">
            <summary>
            The creation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultKind">
            <summary>
            The result kind <see cref="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultKind"/>
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultId">
            <summary>
            The result id (e.g. the collector id)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultParentId">
            <summary>
            The result parent id (e.g. wage typo on custom wage type)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultCreated">
            <summary>
            The result creation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultNumber">
            <summary>
            The result number (e.g. wage type number)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.KindName">
            <summary>
            The kind name, wage type number or collect type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultStart">
            <summary>
            The result start date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultEnd">
            <summary>
            The result end date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultType">
            <summary>
            The result type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultTags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultValue">
            <summary>
            The result value (JSON)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.ResultNumericValue">
            <summary>
            The result numeric value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.Attributes">
            <summary>
            The result attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.JobId">
            <summary>
            The payrun job id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.JobName">
            <summary>
            The payrun job name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.JobReason">
            <summary>
            The payrun job reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.Forecast">
            <summary>
            The forecast name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.JobStatus">
            <summary>
            The payrun job status
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.CycleName">
            <summary>
            The cycle name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PeriodName">
            <summary>
            The period name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PeriodStart">
            <summary>
            The period start date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PeriodEnd">
            <summary>
            The period end date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PayrunId">
            <summary>
            The payrun id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PayrunName">
            <summary>
            The payrun name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PayrollId">
            <summary>
            The payroll id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.PayrollName">
            <summary>
            The payroll name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.DivisionName">
            <summary>
            The division name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.Culture">
            <summary>
            The division culture
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.UserId">
            <summary>
            The user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.UserIdentifier">
            <summary>
            The user identifier
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.EmployeeId">
            <summary>
            The employee id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrollResultValue.EmployeeIdentifier">
            <summary>
            The employee identifier
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultValue.#ctor(PayrollEngine.Domain.Model.PayrollResultValue)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrollResultValue.Equals(PayrollEngine.Domain.Model.PayrollResultValue)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Payrun">
            <summary>
            A payrun
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.PayrollId">
            <summary>
            The payroll id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.Name">
            <summary>
            The payrun name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.NameLocalizations">
            <summary>
            The localized payrun name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.DefaultReason">
            <summary>
            The default payrun reason
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.DefaultReasonLocalizations">
            <summary>
            The localized default payrun reasons
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.StartExpression">
            <summary>
            The payrun start expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.EmployeeAvailableExpression">
            <summary>
            The expression which evaluates if the employee is available
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.EmployeeStartExpression">
            <summary>
            The expression evaluates the employee start
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.EmployeeEndExpression">
            <summary>
            The expression evaluates the employee end
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.WageTypeAvailableExpression">
            <summary>
            The expression which evaluates if the wage type is available
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.EndExpression">
            <summary>
            The payrun end expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.RetroTimeType">
            <summary>
            The payrun retro time type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.Calendar">
            <summary>
            The payrun calendar, fallback is the tenant calendar
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.#ctor(PayrollEngine.Domain.Model.Payrun)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.Equals(PayrollEngine.Domain.Model.Payrun)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.HasExpression">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Payrun.HasObjectScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.GetFunctionTypes">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.GetFunctionScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.GetEmbeddedScriptNames">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Payrun.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunJob">
            <summary>
            A payrun job
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Name">
            <summary>
            The job name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Owner">
            <summary>
            The job owner (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.PayrunId">
            <summary>
            The payrun id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.PayrollId">
            <summary>
            The payroll id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.DivisionId">
            <summary>
            The division id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ParentJobId">
            <summary>
            The parent payrun job id, e.g. the parent retro pay run job (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.CreatedUserId">
            <summary>
            The created user id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ReleasedUserId">
            <summary>
            The release user id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ProcessedUserId">
            <summary>
            The processed user id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.FinishedUserId">
            <summary>
            The finished user id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.IsRetroJob">
            <summary>
            Gets a value indicating whether this instance is retro payrun job
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Tags">
            <summary>
            The job tags (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Forecast">
            <summary>
            The forecast name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.RetroPayMode">
            <summary>
            The payrun retro pay mode (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.JobStatus">
            <summary>
            The payrun job status
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.JobResult">
            <summary>
            The payrun job result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Culture">
            <summary>
            The culture including the calendar (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.CycleName">
            <summary>
            The cycle name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.CycleStart">
            <summary>
            The cycle start date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.CycleEnd">
            <summary>
            The cycle end date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.PeriodName">
            <summary>
            The period name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.PeriodStart">
            <summary>
            The period start date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.PeriodEnd">
            <summary>
            The period end date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.EvaluationDate">
            <summary>
            The evaluation date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Released">
            <summary>
            The job release date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Processed">
            <summary>
            The job process date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Finished">
            <summary>
            The job finish date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.CreatedReason">
            <summary>
            The create reason (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ReleasedReason">
            <summary>
            The release reason (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ProcessedReason">
            <summary>
            The process reason (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.FinishedReason">
            <summary>
            The finished reason (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.TotalEmployeeCount">
            <summary>
            Total employee count
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ProcessedEmployeeCount">
            <summary>
            Processed employee count
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.JobStart">
            <summary>
            The job start date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.JobEnd">
            <summary>
            The job end date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Message">
            <summary>
            The job message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.ErrorMessage">
            <summary>
            The job error message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Employees">
            <summary>
            The payrun employees
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJob.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJob.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJob.#ctor(PayrollEngine.Domain.Model.PayrunJob)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJob.GetEvaluationPeriod">
            <summary>
            Get job time period
            </summary>
            <returns>Date period from the job start until the job end</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJob.Equals(PayrollEngine.Domain.Model.PayrunJob)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJob.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunJobEmployee">
            <summary>
            A payrun job employee
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobEmployee.EmployeeId">
            <summary>
            The employee id (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobEmployee.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobEmployee.#ctor(PayrollEngine.Domain.Model.PayrunJobEmployee)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobEmployee.Equals(PayrollEngine.Domain.Model.PayrunJobEmployee)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunJobFactory">
            <summary>
            Factory for payrun jobs
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobFactory.CreatePayrunJob(PayrollEngine.Domain.Model.PayrunJobInvocation,System.Int32,System.Int32,PayrollEngine.Domain.Model.IPayrollCalculator,System.String)">
            <summary>
            Create a new news payrun job
            </summary>
            <param name="jobInvocation">The job invocation</param>
            <param name="divisionId">The division id</param>
            <param name="payrollId">The payroll id</param>
            <param name="payrollCalculator">The payroll calculator</param>
            <param name="culture">The culture</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunJobInvocation">
            <summary>
            A payrun job invocation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.Name">
            <summary>
            The job name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.Owner">
            <summary>
            The job owner (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.PayrunId">
            <summary>
            The payrun id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.UserId">
            <summary>
            The user id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.PayrunJobId">
            <summary>
            The payrun job id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.ParentJobId">
            <summary>
            The parent payrun job id, e.g. the parent retro pay run job (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.RetroJobs">
            <summary>
            The retro payrun jobs (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.Tags">
            <summary>
            The job tags (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.Forecast">
            <summary>
            The forecast name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.ExecutionMode">
            <summary>
            The payrun job execution mode (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.RetroPayMode">
            <summary>
            The payrun retro pay mode (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.JobResult">
            <summary>
            The payrun job result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.JobStatus">
            <summary>
            The payrun job status
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.PeriodStart">
            <summary>
            The period start date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.EvaluationDate">
            <summary>
            The evaluation date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.Reason">
            <summary>
            The execution reason (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.LogLevel">
            <summary>
            The function log level, default is information
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.EmployeeIdentifiers">
            <summary>
            The payrun employee identifiers
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunJobInvocation.Attributes">
            <summary>
            Payrun job attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobInvocation.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobInvocation.#ctor(PayrollEngine.Domain.Model.PayrunJobInvocation)">
            <summary>Initializes a new instance from a copy</summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunJobInvocation.Equals(PayrollEngine.Domain.Model.PayrunJobInvocation)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunParameter">
            <summary>
            A payroll payrun parameter
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.Name">
            <summary>
            The payrun parameter name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.NameLocalizations">
            <summary>
            The localized wage type names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.Description">
            <summary>
            The payrun parameter description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.DescriptionLocalizations">
            <summary>
            The localized payrun parameter descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.Mandatory">
            <summary>
            The parameter mandatory state
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.Value">
            <summary>
            The parameter value (JSON)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.ValueType">
            <summary>
            The parameter value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunParameter.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.PayrunParameter"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunParameter.#ctor(PayrollEngine.Domain.Model.PayrunParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.PayrunParameter"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunParameter.Equals(PayrollEngine.Domain.Model.PayrunParameter)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunParameter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunResult">
            <summary>
            A payrun result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.PayrollResultId">
            <summary>
            The payroll result id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Source">
            <summary>
            The result source (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Name">
            <summary>
            The result name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.NameLocalizations">
            <summary>
            The localized result names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Slot">
            <summary>
            The result slot (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.ValueType">
            <summary>
            The value type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Value">
            <summary>
            The case result value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.NumericValue">
            <summary>
            The numeric result value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Start">
            <summary>
            The period starting date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.StartHash">
            <summary>
            The starting date hash code (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.End">
            <summary>
            The period ending date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Tags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResult.Attributes">
            <summary>
            The result attributes (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResult.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResult.#ctor(PayrollEngine.Domain.Model.PayrunResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResult.Equals(PayrollEngine.Domain.Model.PayrunResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.PayrunResultQuery">
            <summary>
            Payrun result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.PayrunResultQuery.ResultNames">
            <summary>The result names</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResultQuery.#ctor(PayrollEngine.Domain.Model.PayrunResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.PayrunResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Regulation">
            <summary>
            A payroll regulation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.Name">
            <summary>
            The regulation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.NameLocalizations">
            <summary>
            The localized regulation names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.Version">
            <summary>
            The regulation version, unique per regulation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.SharedRegulation">
            <summary>
            Shared regulation (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.ValidFrom">
            <summary>
            The date the regulation to be in force, anytime if undefined
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.Owner">
            <summary>
            The owner name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.Description">
            <summary>
            The regulation description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.DescriptionLocalizations">
            <summary>
            The localized regulation descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.BaseRegulations">
            <summary>
            Required base regulations
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Regulation.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Regulation.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Regulation.#ctor(PayrollEngine.Domain.Model.Regulation)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Regulation.Equals(PayrollEngine.Domain.Model.Regulation)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Regulation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationCase">
            <summary>
            A regulation case
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationCase.RegulationId">
            <summary>
            The regulationId
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCase.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCase.#ctor(PayrollEngine.Domain.Model.RegulationCase)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCase.Equals(PayrollEngine.Domain.Model.RegulationCase)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationCaseField">
            <summary>
            A regulation case field
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationCaseField.RegulationId">
            <summary>
            The regulationId
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationCaseField.CaseId">
            <summary>
            The case id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationCaseField.CaseType">
            <summary>
            The case type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCaseField.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCaseField.#ctor(PayrollEngine.Domain.Model.RegulationCaseField)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCaseField.Equals(PayrollEngine.Domain.Model.RegulationCaseField)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationCaseRelation">
            <summary>
            A regulation case relation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationCaseRelation.RegulationId">
            <summary>
            The regulationId
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCaseRelation.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCaseRelation.#ctor(PayrollEngine.Domain.Model.RegulationCaseRelation)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCaseRelation.Equals(PayrollEngine.Domain.Model.RegulationCaseRelation)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationCollector">
            <summary>
            A regulation collector
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationCollector.RegulationId">
            <summary>
            The regulationId
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCollector.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCollector.#ctor(PayrollEngine.Domain.Model.RegulationCollector)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationCollector.Equals(PayrollEngine.Domain.Model.RegulationCollector)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationReference">
            <summary>Reference to regulation</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationReference.Name">
            <summary>the regulation name</summary>
            <value>The name.</value>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationReference.Version">
            <summary>Gets the regulation version</summary>
            <value>The version.</value>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.RegulationReference"/> class.
            </summary>
            <param name="reference">The reference string</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationReference.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.RegulationReference"/> class</summary>
            <param name="name">The regulation name</param>
            <param name="version">The regulation version</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationReference.IsMatching(System.String,System.Int32)">
            <summary>Determines whether the specified regulation is matching this reference</summary>
            <param name="name">The regulation name</param>
            <param name="version">The regulation version</param>
            <returns>True if the regulation reference matches the test regulation</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationShare">
            <summary>
            A regulation division
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationShare.ProviderTenantId">
            <summary>
            The provider tenant id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationShare.ProviderRegulationId">
            <summary>
            The provider regulation id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationShare.ConsumerTenantId">
            <summary>
            The consumer tenant id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationShare.ConsumerDivisionId">
            <summary>
            The consumer division id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationShare.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationShare.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationShare.#ctor(PayrollEngine.Domain.Model.RegulationShare)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationShare.Equals(PayrollEngine.Domain.Model.RegulationShare)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationShare.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RegulationWageType">
            <summary>
            A regulation wage type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RegulationWageType.RegulationId">
            <summary>
            The regulationId
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationWageType.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationWageType.#ctor(PayrollEngine.Domain.Model.RegulationWageType)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RegulationWageType.Equals(PayrollEngine.Domain.Model.RegulationWageType)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Report">
            <summary>
            A payroll report
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Name">
            <summary>
            The payroll result report name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.NameLocalizations">
            <summary>
            The localized payroll result report names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Description">
            <summary>
            The payroll result report description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.DescriptionLocalizations">
            <summary>
            The localized payroll result report descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Category">
            <summary>
            The report category
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.AttributeMode">
            <summary>
            The report attribute mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Queries">
            <summary>
            The report queries, key is the query name and value the api operation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Relations">
            <summary>
            The report data relations, based on the queries
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.BuildExpression">
            <summary>
            The report build expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.StartExpression">
            <summary>
            The report start expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.EndExpression">
            <summary>
            The report end expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.Clusters">
            <summary>
            The wage type clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.#ctor(PayrollEngine.Domain.Model.Report)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.Equals(PayrollEngine.Domain.Model.Report)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.FromAuditObject(PayrollEngine.Domain.Model.ReportAudit)">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.HasExpression">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Report.HasObjectScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.GetFunctionTypes">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.GetFunctionScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.GetEmbeddedScriptNames">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Report.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportAudit">
            <summary>
            A payroll report audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.ReportId">
            <summary>
            The report id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Name">
            <summary>
            The payroll result report name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.NameLocalizations">
            <summary>
            The localized payroll result report names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Description">
            <summary>
            The payroll result report description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.DescriptionLocalizations">
            <summary>
            The localized payroll result report descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Category">
            <summary>
            The report category
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.AttributeMode">
            <summary>
            The report attribute mode
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Queries">
            <summary>
            The report queries, key is the query name and value the api operation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Relations">
            <summary>
            The report data relations, based on the queries
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.BuildExpression">
            <summary>
            The report build expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.StartExpression">
            <summary>
            The report start expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.EndExpression">
            <summary>
            The report end expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportAudit.Clusters">
            <summary>
            The wage type clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportAudit.#ctor(PayrollEngine.Domain.Model.ReportAudit)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportLog">
            <summary>
            A payroll report log
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportLog.ReportName">
            <summary>
            The report name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportLog.ReportDate">
            <summary>
            The report date (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportLog.Key">
            <summary>
            The report log key (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportLog.User">
            <summary>
            The report user (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportLog.Message">
            <summary>
            The report message (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportLog"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportLog.#ctor(PayrollEngine.Domain.Model.ReportLog)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportLog"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportLog.Equals(PayrollEngine.Domain.Model.ReportLog)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportParameter">
            <summary>
            A payroll report parameter
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.Name">
            <summary>
            The report parameter name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.NameLocalizations">
            <summary>
            The localized wage type names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.Description">
            <summary>
            The report parameter description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.DescriptionLocalizations">
            <summary>
            The localized report parameter descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.Mandatory">
            <summary>
            The parameter mandatory state
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.Value">
            <summary>
            The parameter value (JSON)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.ValueType">
            <summary>
            The parameter value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.ParameterType">
            <summary>
            The parameter value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameter.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportParameter"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameter.#ctor(PayrollEngine.Domain.Model.ReportParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportParameter"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameter.Equals(PayrollEngine.Domain.Model.ReportParameter)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameter.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameter.FromAuditObject(PayrollEngine.Domain.Model.ReportParameterAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportParameterAudit">
            <summary>
            A payroll report parameter audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.ReportParameterId">
            <summary>
            The report parameter id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.Name">
            <summary>
            The report parameter name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.NameLocalizations">
            <summary>
            The localized wage type names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.Description">
            <summary>
            The report parameter description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.DescriptionLocalizations">
            <summary>
            The localized report parameter descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.Mandatory">
            <summary>
            The parameter mandatory state
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.Value">
            <summary>
            The parameter value (JSON)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.ValueType">
            <summary>
            The parameter value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.ParameterType">
            <summary>
            The parameter type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportParameterAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameterAudit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportParameterAudit"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportParameterAudit.#ctor(PayrollEngine.Domain.Model.ReportParameterAudit)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportParameterAudit"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportRequest">
            <summary>
            A payroll report request
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportRequest.Language">
            <summary>
            The report language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportRequest.UserId">
            <summary>
            The report user
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportRequest.Parameters">
            <summary>
            The report parameters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportRequest"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportRequest.#ctor(PayrollEngine.Domain.Model.ReportRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportRequest"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportRequest.Equals(PayrollEngine.Domain.Model.ReportRequest)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportResponse">
            <summary>
            A payroll report response
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.Queries">
            <summary>
            The report queries, key is the query name and value the api operation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.Relations">
            <summary>
            The report relations
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.Parameters">
            <summary>
            The report parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.ReportName">
            <summary>
            The report name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.Language">
            <summary>
            The report language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.User">
            <summary>
            The report user identifier
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportResponse.Result">
            <summary>
            The report result data
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportResponse"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportResponse.#ctor(PayrollEngine.Domain.Model.ReportResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportResponse"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportResponse.Equals(PayrollEngine.Domain.Model.ReportResponse)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportSet">
            <summary>
            A report set 
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportSet.RegulationId">
            <summary>
            The regulation id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportSet.Parameters">
            <summary>
            The report parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportSet.Templates">
            <summary>
            The report templates
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportSet.#ctor(PayrollEngine.Domain.Model.ReportSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportSet.Equals(PayrollEngine.Domain.Model.ReportSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportTemplate">
            <summary>
            A payroll report template
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.Name">
            <summary>
            The report template name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.Language">
            <summary>
            The report language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.Content">
            <summary>
            The report content (client owned)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.ContentType">
            <summary>
            The report content type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.Schema">
            <summary>
            The report schema (client owned)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.Resource">
            <summary>
            The report external resource
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplate.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportTemplate"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplate.#ctor(PayrollEngine.Domain.Model.ReportTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportTemplate"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplate.Equals(PayrollEngine.Domain.Model.ReportTemplate)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplate.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplate.FromAuditObject(PayrollEngine.Domain.Model.ReportTemplateAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplate.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportTemplateAudit">
            <summary>
            A payroll report template
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.ReportTemplateId">
            <summary>
            The report template id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.Name">
            <summary>
            The report template name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.Language">
            <summary>
            The report language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.Content">
            <summary>
            The report content
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.ContentType">
            <summary>
            The report content type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.Schema">
            <summary>
            The report schema
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.Resource">
            <summary>
            The report external resource
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplateAudit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportTemplateAudit"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ReportTemplateAudit.#ctor(PayrollEngine.Domain.Model.ReportTemplateAudit)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.ReportTemplateAudit"/> class
            </summary>
            <param name="copySource">The copy source.</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ReportTemplateQuery">
            <summary>
            Report templates query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateQuery.Language">
            <summary>
            Report language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ReportTemplateQuery.ExcludeContent">
            <summary>
            Exclude report content
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository">
            <summary>
            Cache for case fields
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.PayrollRepository">
            <summary>
            The payroll repository
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.TenantId">
            <summary>
            The tenant id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.PayrollId">
            <summary>
            The payroll id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.RegulationDate">
            <summary>
            The regulation validation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.EvaluationDate">
            <summary>
            The evaluation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.ClusterSet">
            <summary>
            The cluster set
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.#ctor(PayrollEngine.Domain.Model.Repository.IPayrollRepository,System.Int32,System.Int32,System.DateTime,System.DateTime,PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository"/> class
            </summary>
            <param name="payrollRepository">The payroll repository</param>
            <param name="tenantId">The tenant identifier</param>
            <param name="payrollId">The payroll identifier</param>
            <param name="regulationDate">The regulation date (default: UTC now)</param>
            <param name="evaluationDate">The evaluation date</param>
            <param name="clusterSet">The cluster set</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.GetCaseTypeAsync(PayrollEngine.Domain.Model.IDbContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.GetParentCaseIdAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.GetDerivedCaseFieldsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.CaseType)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseFieldProxyRepository.GetDerivedCaseFieldsAsync(PayrollEngine.Domain.Model.IDbContext,System.String)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.CaseValueCache">
            <summary>
            Set with all repository case values
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseValueCache.Context">
            <summary>
            The database context
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseValueCache.CaseValueRepository">
            <summary>
            The case value repository
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseValueCache.ParentId">
            <summary>
            The repository parent id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseValueCache.DivisionId">
            <summary>
            The division id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseValueCache.EvaluationDate">
            <summary>
            The evaluation date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.CaseValueCache.Forecast">
            <summary>
            The forecast name
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseValueCache.#ctor(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.Repository.ICaseValueRepository,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Case value cache constructor
            </summary>
            <param name="context">The database context</param>
            <param name="caseValueRepository"></param>
            <param name="parentId"></param>
            <param name="divisionId"></param>
            <param name="evaluationDate"></param>
            <param name="forecast"></param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseValueCache.GetCaseValueSlotsAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseValueCache.GetCaseValuesAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseValueCache.GetCasePeriodValuesAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.CaseValueCache.GetRetroCaseValueAsync(System.String,PayrollEngine.DatePeriod)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IAuditChildDomainRepository`1">
            <summary>
            Generic audit domain object repository with support of the basic CRUD operations
            </summary>
            <typeparam name="TDomain">The domain object with an audit</typeparam>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IAuditChildDomainRepository`1.GetCurrentAuditAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Get current audit object from the tracked item
            </summary>
            <param name="context">The database context</param>
            <param name="trackObjectId">The tracking object id</param>
            <returns>The audit object</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IAuditChildDomainRepository`1.GetAuditAtAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.DateTime)">
            <summary>
            Get audit object from a given time, based on the modification date
            </summary>
            <param name="context">The database context</param>
            <param name="trackObjectId">The tracking object id</param>
            <param name="moment">The time moment</param>
            <returns>The domain object at a given time.
            For future dates the latest modified object will be used.
            A null result indicates that the object was not existing at the given time</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseAuditRepository">
            <summary>
            Repository for case audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IGlobalCaseChangeRepository">
            <summary>
            Repository for global case changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.INationalCaseChangeRepository">
            <summary>
            Repository for national case changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICompanyCaseChangeRepository">
            <summary>
            Repository for company case changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeCaseChangeRepository">
            <summary>
            Repository for employee case changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseChangeRepository`1">
            <summary>
            Repository for case changes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseChangeRepository`1.QueryAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Query resources
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="parentId">The parent object id</param>
            <param name="query">The query parameters</param>
            <returns>A list of the resources, matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseChangeRepository`1.QueryCountAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Count query of resources
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="parentId">The parent object id</param>
            <param name="query">The query parameters</param>
            <returns>Resource count matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseChangeRepository`1.QueryValuesAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Query case values of case changes
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="parentId">The change parent id</param>
            <param name="query">The query parameters</param>
            <returns>A list of case values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseChangeRepository`1.QueryValuesCountAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Query count of case values of case changes
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="parentId">The change parent id</param>
            <param name="query">The query parameters</param>
            <returns>Resource count matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseChangeRepository`1.AddCaseChangeAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.Int32,`0)">
            <summary>
            Add new case change
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="payrollId">The payroll id</param>
            <param name="parentId">The change parent id</param>
            <param name="caseChange">The case values to add</param>
            <returns>The case value at a given time, null if no value is available</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IGlobalCaseDocumentRepository">
            <summary>
            Repository for global case documents
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.INationalCaseDocumentRepository">
            <summary>
            Repository for national case documents
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICompanyCaseDocumentRepository">
            <summary>
            Repository for company case documents
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeCaseDocumentRepository">
            <summary>
            Repository for employee case documents
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseDocumentRepository">
            <summary>
            Repository for case documents
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseFieldAuditRepository">
            <summary>
            Repository for payroll case field audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseFieldProxyRepository">
            <summary>
            Cache for case fields
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.ICaseFieldProxyRepository.EvaluationDate">
            <summary>
            The evaluation date
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseFieldProxyRepository.GetCaseTypeAsync(PayrollEngine.Domain.Model.IDbContext,System.String)">
            <summary>
            Get case type of a case field
            </summary>
            <param name="context">The database context</param>
            <param name="caseFieldName">The case field name</param>
            <returns>The case type</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseFieldProxyRepository.GetParentCaseIdAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Get id of the parent case
            </summary>
            <param name="context">The database context</param>
            <param name="caseFieldId">The case field object id</param>
            <returns>The id of the parent case</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseFieldProxyRepository.GetDerivedCaseFieldsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.CaseType)">
            <summary>
            The available case fields by case type
            </summary>
            <param name="context">The database context</param>
            <param name="caseType">The case type</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseFieldProxyRepository.GetDerivedCaseFieldsAsync(PayrollEngine.Domain.Model.IDbContext,System.String)">
            <summary>
            Get a case field by his name, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="caseFieldName">The case field name (default: all)</param>
            <returns>The matching case field, null if no field was found</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseFieldRepository">
            <summary>
            Repository for case fields
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseFieldRepository.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determine if a case contains a case field name
            </summary>
            <param name="context">The database context</param>
            <param name="caseId">The case id</param>
            <param name="caseFieldNames">The case field names</param>
            <returns>True if the case contains a case field with this name</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseFieldRepository.GetRegulationCaseFieldsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32})">
            <summary>
            Get regulation case fields by name
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="caseFieldNames">The case field names</param>
            <param name="regulationId">The regulation id</param>
            <returns>The regulation case fields</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseRelationAuditRepository">
            <summary>
            Repository for payroll case relation audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseRelationRepository">
            <summary>
            Repository for case relations
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseRepository">
            <summary>
            Repository for cases
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseRepository.QueryAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Query cases by name
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="caseName">The case name</param>
            <param name="regulationId">The regulation id</param>
            <returns>The regulation cases</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IGlobalCaseValueChangeRepository">
            <summary>
            Repository for global case value changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.INationalCaseValueChangeRepository">
            <summary>
            Repository for national case value changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICompanyCaseValueChangeRepository">
            <summary>
            Repository for company case value changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeCaseValueChangeRepository">
            <summary>
            Repository for employee case value changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseValueChangeRepository">
            <summary>
            Repository for case value changes
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseValueRepository`1">
            <summary>
            Repository for case values
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseValueRepository`1.GetCaseValueSlotsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Get all case slots from a specific case field
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The case value parent id</param>
            <param name="caseFieldName">The case field name</param>
            <returns>The case values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseValueRepository`1.GetCaseValuesAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.DomainCaseValueQuery,System.String,System.Nullable{System.DateTime})">
            <summary>
            Get all case values from a specific case field
            </summary>
            <param name="context">The database context</param>
            <param name="query">The case value query</param>
            <param name="caseFieldName">The case field name</param>
            <param name="evaluationDate">The evaluation date (default: UTC now)</param>
            <returns>The case values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseValueRepository`1.GetPeriodCaseValuesAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.DomainCaseValueQuery,PayrollEngine.DatePeriod,System.String,System.Nullable{System.DateTime})">
            <summary>
            Get all case values from a specific case field restricted to a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The case value query</param>
            <param name="period">The period</param>
            <param name="caseFieldName">The case field name</param>
            <param name="evaluationDate">The evaluation date (default: UTC now)</param>
            <returns>The case values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICaseValueRepository`1.GetRetroCaseValueAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.DomainCaseValueQuery,PayrollEngine.DatePeriod,System.String)">
            <summary>
            Get retro case values from a certain time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The case value query</param>
            <param name="period">The date period</param>
            <param name="caseFieldName">The case field name</param>
            <returns>The retro case value</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IGlobalCaseValueRepository">
            <summary>
            Repository for global case values
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.INationalCaseValueRepository">
            <summary>
            Repository for national case values
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICompanyCaseValueRepository">
            <summary>
            Repository for company case values
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeCaseValueRepository">
            <summary>
            Repository for employee case values
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseValueRepository">
            <summary>
            Repository for case values
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IGlobalCaseValueSetupRepository">
            <summary>
            Repository for global case value setups
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.INationalCaseValueSetupRepository">
            <summary>
            Repository for national case value setups
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICompanyCaseValueSetupRepository">
            <summary>
            Repository for company case value setups
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeCaseValueSetupRepository">
            <summary>
            Repository for national case value setup
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICaseValueSetupRepository">
            <summary>
            Repository for case value setups
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1">
            <summary>
            Generic domain item repository with support of the basic CRUD operations
            </summary>
            <typeparam name="T">The hosted domain child item</typeparam>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.ExistsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32)">
            <summary>
            Test if an domain item exists
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="id">The item id</param>
            <returns>True, if the domain item exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.QueryAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,PayrollEngine.Query)">
            <summary>
            Query resources
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="query">The query parameters</param>
            <returns>A list of the resources, matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.QueryCountAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,PayrollEngine.Query)">
            <summary>
            Count query of resources
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="query">The query parameters</param>
            <returns>Resource count matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.GetParentIdAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Get id of the parent item
            </summary>
            <param name="context">The database context</param>
            <param name="itemId">The domain item id</param>
            <returns>The id of the parent item</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.GetAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32)">
            <summary>
            Get item by parent and id
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="itemId">The domain item id</param>
            <returns>The id of the parent item</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.CreateAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,`0)">
            <summary>
            Add a new domain item to the repository
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="item">The domain item to add</param>
            <returns>The newly created domain item including the new id</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.CreateAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple new domain items to the repository
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="items">The domain items to add</param>
            <returns>The newly created domain items including the new id</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.CreateBulkAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple new domain items to the repository using bulk insert
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="items">The domain items to add</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.UpdateAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,`0)">
            <summary>
            Update a repository domain item including his parent
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="item">The domain item to update</param>
            <returns>The updated domain item</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IChildDomainRepository`1.DeleteAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32)">
            <summary>
            Remove a domain item from the repository
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent item id</param>
            <param name="itemId">The if of the domain item to delete</param>
            <returns>True if the record was deleted</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICollectorAuditRepository">
            <summary>
            Repository for payroll collector audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICollectorCustomResultRepository">
            <summary>
            Repository for custom collector results
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICollectorRepository">
            <summary>
            Repository for payroll collectors
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ICollectorRepository.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determine if any of the collector names are existing
            </summary>
            <param name="context">The database context</param>
            <param name="regulationId">The payroll regulation id</param>
            <param name="collectorNames">The collector names</param>
            <returns>True if any collector with a name exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICollectorResultRepository">
            <summary>
            Repository for collector results
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ICollectorResultSetRepository">
            <summary>
            Repository for collector results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.ICollectorResultSetRepository.CollectorCustomResultRepository">
            <summary>
            The collector custom result repository
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IDivisionRepository">
            <summary>
            Repository for divisions
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDivisionRepository.GetByIdsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get multiple divisions by ids
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="divisionIds">The division ids</param>
            <returns>The divisions matching the ids</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDivisionRepository.GetByNameAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Get division by name
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="name">The division name</param>
            <returns>The division matching the name</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IDomainRepository">
            <summary>
            Generic domain item repository with support of the basic CRUD operations
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDomainRepository.ExistsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Test if an domain item exists
            </summary>
            <param name="context">The database context</param>
            <param name="id">The item id</param>
            <returns>True, if the domain item exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDomainRepository.ExistsAsync(PayrollEngine.Domain.Model.IDbContext,System.String,System.Object)">
            <summary>
            Test if an domain item exists
            </summary>
            <param name="context">The database context</param>
            <param name="fieldName">The item field name</param>
            <param name="value">The item field value</param>
            <returns>True, if the domain item exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDomainRepository.GetAttributeAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Gets attribute value as JSON
            </summary>
            <param name="context">The database context</param>
            <param name="id">The item id</param>
            <param name="attributeName">The attribute name</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDomainRepository.ExistsAttributeAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Test if an attribute exists
            </summary>
            <param name="context">The database context</param>
            <param name="id">The item id</param>
            <param name="attributeName">The attribute name</param>
            <returns>True, if the attribute exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDomainRepository.SetAttributeAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String,System.String)">
            <summary>
            Creates or updates the attribute value
            </summary>
            <param name="context">The database context</param>
            <param name="id">The item id</param>
            <param name="attributeName">The attribute name</param>
            <param name="value">The attribute value as JSON</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IDomainRepository.DeleteAttributeAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Delete an attribute
            </summary>
            <param name="context">The database context</param>
            <param name="id">The if of the domain item to delete</param>
            <param name="attributeName">The attribute name</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeDivisionRepository">
            <summary>
            Repository for employee divisions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.IEmployeeDivisionRepository.DivisionRepository">
            <summary>
            The division repository
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IEmployeeRepository">
            <summary>
            Repository for tenants
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IEmployeeRepository.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Determine if the employee existing by the identifier
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="identifier">The user identifier</param>
            <returns>True if the employee with this identifier exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILogRepository">
            <summary>
            Repository for logs
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILookupAuditRepository">
            <summary>
            Repository for payroll case relation audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILookupRepository">
            <summary>
            Repository for lookups
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILookupRepository`1">
            <summary>
            Repository for lookups
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupRepository`1.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determine if any of the lookup names are existing
            </summary>
            <param name="context">The database context</param>
            <param name="regulationId">The regulation id</param>
            <param name="lookupNames">The lookup names</param>
            <returns>True if any lookup with this name exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILookupSetRepository">
            <summary>
            Repository for lookup sets
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupSetRepository.GetLookupSetAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a lookup set, including the lookup values
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="regulationId">The regulation id</param>
            <param name="lookupId">The lookup id</param>
            <returns>The lookup set</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupSetRepository.GetLookupDataAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.Int32,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get lookup values in a specific language
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="regulationId">The regulation id</param>
            <param name="lookupId">The id of the lookup</param>
            <param name="language">The content language</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupSetRepository.GetLookupValueDataAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get lookup values in a specific language
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="lookupId">The id of the lookup</param>
            <param name="lookupKey">The lookup key</param>
            <param name="language">The content language</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupSetRepository.GetRangeLookupValueDataAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.Decimal,System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get lookup values in a specific language
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="lookupId">The id of the lookup</param>
            <param name="rangeValue">The range value</param>
            <param name="lookupKey">The lookup key</param>
            <param name="language">The content language</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILookupValueAuditRepository">
            <summary>
            Repository for payroll case relation audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ILookupValueRepository">
            <summary>
            Repository for lookup values
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupValueRepository.ExistsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String,System.Nullable{System.Decimal})">
            <summary>
            Determine if a lookup value with the same key exists
            </summary>
            <param name="context">The database context</param>
            <param name="lookupId">The lookup id</param>
            <param name="key">The lookup value key</param>
            <param name="rangeValue">The lookup range value</param>
            <returns>True if the lookup value with any of the key exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ILookupValueRepository.DeleteAll(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Delete all lookup values from a lookup
            </summary>
            <param name="context">The database context</param>
            <param name="lookupId">The lookup id</param>
            <returns>The count of deleted lookup values</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository">
            <summary>
            Repository for payroll consolidated result infos
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository.GetPayrollResultAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Get consolidated payroll results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll result query</param>
            <returns>Period payroll results</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository.GetWageTypeResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery)">
            <summary>
            Get consolidated period wage type results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The wage type result query</param>
            <returns>Period wage type values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository.GetWageTypeCustomResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.ConsolidatedWageTypeResultQuery)">
            <summary>
            Get consolidated wage type custom results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The wage type result query</param>
            <returns>Custom wage type values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository.GetCollectorResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery)">
            <summary>
            Get consolidated collector results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The collector result query</param>
            <returns>Period collector values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository.GetCollectorCustomResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.ConsolidatedCollectorResultQuery)">
            <summary>
            Get consolidated collector custom results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The collector result query</param>
            <returns>Period collector values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollConsolidatedResultRepository.GetPayrunResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.ConsolidatedPayrunResultQuery)">
            <summary>
            Get consolidated payrun results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payrun result query</param>
            <returns>Period wage type values</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrollLayerRepository">
            <summary>
            Repository for payroll layers
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollLayerRepository.ExistsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determine if a payroll layer with the same level and priority exists
            </summary>
            <param name="context">The database context</param>
            <param name="payrollId">The payroll id</param>
            <param name="level">The layer level</param>
            <param name="priority">The layer priority</param>
            <returns>True if the lookup row with any of the key exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrollRepository">
            <summary>
            Repository for payrolls
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetParentCaseIdAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Get id of the parent case
            </summary>
            <param name="context">The database context</param>
            <param name="caseFieldId">The case field object id</param>
            <returns>The id of the parent case</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedRegulationsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery)">
            <summary>
            Get all active derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <returns>The derived cases</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedCasesAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Nullable{PayrollEngine.CaseType},System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get all active derived cases, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="caseType">The case type (default: all)</param>
            <param name="caseNames">The case names (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The derived cases</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedCaseFieldsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get a case field by his name, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="caseFieldNames">The case field names (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The matching case field, null if no field was found</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedCaseFieldsOfCaseAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get a case field by his name, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="caseNames">The case names</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The matching case field, null if no field was found</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedCaseRelationsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.String,System.String,System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get all active case relations, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="sourceCaseName">The relation source case name (default: all)</param>
            <param name="targetCaseName">The relation target case name (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The derived case relations</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedWageTypesAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.Decimal},System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get from all wage types the the topmost derived regulation
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="wageTypeNumbers">The wage type numbers (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The derived wage types</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedCollectorsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get all active collectors, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="collectorNames">The collector names filter (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The derived collectors</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedLookupsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType})">
            <summary>
            Get all active lookups, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="lookupNames">The lookup names filter (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <returns>The derived lookups</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedLookupValuesAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType})">
            <summary>
            Get all active lookup values, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="lookupNames">The lookup names filter (default: all)</param>
            <param name="lookupKeys">The lookup-value keys filter (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <returns>The derived lookup values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedReportsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType},PayrollEngine.Domain.Model.ClusterSet)">
            <summary>
            Get all active reports, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="reportNames">The report names filter (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <param name="clusterSet">The cluster set</param>
            <returns>The derived reports</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedReportParametersAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType})">
            <summary>
            Get all active report parameters, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="reportNames">The report names filter (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <returns>The derived report parameters</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedReportTemplatesAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.Language},System.Nullable{PayrollEngine.OverrideType})">
            <summary>
            Get all active report templates, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="reportNames">The report names filter (default: all)</param>
            <param name="language">The report language</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <returns>The derived report templates</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollRepository.GetDerivedScriptsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.PayrollQuery,System.Collections.Generic.IEnumerable{System.String},System.Nullable{PayrollEngine.OverrideType})">
            <summary>
            Get all active scripts, considering derived regulations
            </summary>
            <param name="context">The database context</param>
            <param name="query">The payroll query</param>
            <param name="scriptNames">The script names filter (default: all)</param>
            <param name="overrideType">The override type filter (default: active)</param>
            <returns>The derived scripts</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository">
            <summary>
            Repository for payroll result infos
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository.QueryResultValuesAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Get all result values
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="employeeId">The employee id</param>
            <param name="query">The query parameters</param>
            <returns>A list of payroll result values, matching the parameters and conditions</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository.QueryResultValueCountAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Count query payroll result values
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="employeeId">The employee id</param>
            <param name="query">The query parameters</param>
            <returns>Payroll result values count matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository.GetWageTypeResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.WageTypeResultQuery,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get employee wage type results from a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The wage type result query</param>
            <param name="payrunJobId">The payrun job id</param>
            <param name="parentPayrunJobId">The parent payrun job id</param>
            <returns>Employee wage type values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository.GetWageTypeCustomResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.WageTypeResultQuery,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get employee wage type custom results from a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The wage type result query</param>
            <param name="payrunJobId">The payrun job id</param>
            <param name="parentPayrunJobId">The parent payrun job id</param>
            <returns>Employee wage type values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository.GetCollectorResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.CollectorResultQuery,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get employee collector results from a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The collector result query</param>
            <param name="payrunJobId">The payrun job id</param>
            <param name="parentPayrunJobId">The parent payrun job id</param>
            <returns>Employee collector values</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrollResultRepository.GetCollectorCustomResultsAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Domain.Model.CollectorResultQuery,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get collector custom results collected within a time period
            </summary>
            <param name="context">The database context</param>
            <param name="query">The collector result query</param>
            <param name="payrunJobId">The payrun job id</param>
            <param name="parentPayrunJobId">The parent payrun job id</param>
            <returns>Period collector values</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrollResultSetRepository">
            <summary>
            Repository for payroll results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.IPayrollResultSetRepository.WageTypeResultSetRepository">
            <summary>
            The wage type result repository
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.IPayrollResultSetRepository.CollectorResultSetRepository">
            <summary>
            The collector result repository
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrunJobEmployeeRepository">
            <summary>
            Repository for payrun job employees
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrunJobRepository">
            <summary>
            Repository for payrun jobs
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrunJobRepository.QueryEmployeePayrunJobsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Query employee payrun jobs
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="employeeId">The employee id</param>
            <param name="query">The query parameters</param>
            <returns>Payrun jobs of the employee</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrunJobRepository.QueryEmployeePayrunJobsCountAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.Query)">
            <summary>
            Query employee payrun jobs count
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="employeeId">The employee id</param>
            <param name="query">The query parameters</param>
            <returns>Payrun jobs of the employee</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrunJobRepository.PatchPayrunJobStatusAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,PayrollEngine.PayrunJobStatus,System.Int32,System.String)">
            <summary>
            Patch the payrun job status
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="payrunJobId">The payrun job id</param>
            <param name="jobStatus">The job status to path</param>
            <param name="userId">The user id</param>
            <param name="reason">The change reason</param>
            <returns>The payrun job with the new status</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrunParameterRepository">
            <summary>
            Repository for payrun parameter
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrunRepository">
            <summary>
            Repository for payruns
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IPayrunRepository.RebuildAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32)">
            <summary>
            Rebuild the payrun
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="payrunId">The payrun id</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IPayrunResultRepository">
            <summary>
            Repository for payrun results
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IRegulationRepository">
            <summary>
            Repository for payroll regulations
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IRegulationShareRepository">
            <summary>
            Repository for regulation permissions
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRegulationShareRepository.GetAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Test for permission
            </summary>
            <param name="context">The database context</param>
            <param name="providerTenantId">The tenant id</param>
            <param name="providerRegulationId">The regulation id</param>
            <param name="consumerTenantId">The permission tenant id</param>
            <param name="consumerDivisionId">The permission division id</param>
            <returns>True any collector exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportAuditRepository">
            <summary>
            Repository for report audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportLogRepository">
            <summary>
            Repository for report log
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportParameterAuditRepository">
            <summary>
            Repository for report parameter audit
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportParameterRepository">
            <summary>
            Repository for report parameter
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportRepository">
            <summary>
            Repository for reports
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportRepository`1">
            <summary>
            Repository for reports
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportSetRepository">
            <summary>
            Repository for report sets
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportTemplateAuditRepository">
            <summary>
            Repository for report template
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IReportTemplateRepository">
            <summary>
            Repository for report template
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IRepository">
            <summary>
            Generic repository
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.IRepository.TypeName">
            <summary>
            The object type name
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1">
            <summary>
            Generic domain object repository with support of the basic CRUD operations
            </summary>
            <typeparam name="T">The hosted root domain object</typeparam>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.QueryAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Query)">
            <summary>
            Query resources
            </summary>
            <param name="context">The database context</param>
            <param name="query">The query parameters</param>
            <returns>A list of the resources, matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.QueryCountAsync(PayrollEngine.Domain.Model.IDbContext,PayrollEngine.Query)">
            <summary>
            Count query of resources
            </summary>
            <param name="context">The database context</param>
            <param name="query">The query parameters</param>
            <returns>Resource count matching the query</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.GetAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Get one specific domain object by id
            </summary>
            <param name="context">The database context</param>
            <param name="id">The object id</param>
            <returns>The domain object</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.CreateAsync(PayrollEngine.Domain.Model.IDbContext,`0)">
            <summary>
            Add a new domain object to the repository
            </summary>
            <param name="context">The database context</param>
            <param name="item">The domain object to add</param>
            <returns>The newly created domain object including the new id</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.CreateAsync(PayrollEngine.Domain.Model.IDbContext,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple new domain objects to the repository
            </summary>
            <param name="context">The database context</param>
            <param name="items">The domain objects to add</param>
            <returns>The newly created domain objects including the new id</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.UpdateAsync(PayrollEngine.Domain.Model.IDbContext,`0)">
            <summary>
            Update a repository domain object
            </summary>
            <param name="context">The database context</param>
            <param name="obj">The domain object to update</param>
            <returns>The updated domain object</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IRootDomainRepository`1.DeleteAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Remove a domain object from the repository
            </summary>
            <param name="context">The database context</param>
            <param name="id">The if of the domain object to delete</param>
            <returns>True if the record was deleted</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IScriptAuditRepository">
            <summary>
            Repository for payroll script audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IScriptRepository">
            <summary>
            Repository for payroll scripts
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IScriptRepository.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determine if any of the script names are existing
            </summary>
            <param name="context">The database context</param>
            <param name="regulationId">The payroll regulation id</param>
            <param name="scriptNames">The script names</param>
            <returns>True if any script with this name exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IScriptRepository.GetFunctionScriptsAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.List{PayrollEngine.FunctionType},System.Nullable{System.DateTime})">
            <summary>
            Get script from specific function types
            </summary>
            <param name="context">The database context</param>
            <param name="regulationId">The payroll regulation id</param>
            <param name="functionTypes">The function types</param>
            <param name="evaluationDate">The evaluation date (default: UTC now)</param>
            <returns>The function types scripts</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IScriptTrackDomainObjectRepository`2">
            <summary>
            Repository for script objects
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IScriptTrackDomainObjectRepository`2.RebuildAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32)">
            <summary>
            Rebuild the script object
            </summary>
            <param name="context">The database context</param>
            <param name="parentId">The parent object id</param>
            <param name="itemId">The items id to build</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ITaskRepository">
            <summary>
            Repository for tasks
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ITenantRepository">
            <summary>
            Repository for tenants
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ITenantRepository.ExistsAsync(PayrollEngine.Domain.Model.IDbContext,System.String)">
            <summary>
            Test if tenant exists
            </summary>
            <param name="context">The database context</param>
            <param name="identifier">The tenant identifier</param>
            <returns>True any collector exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.ITrackChildDomainRepository`2">
            <summary>
            Generic domain object repository with support of the basic CRUD operations
            </summary>
            <typeparam name="TDomain">The domain object with an audit</typeparam>
            <typeparam name="TAudit">The audit object</typeparam>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ITrackChildDomainRepository`2.GetCurrentAuditAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32)">
            <summary>
            Get current audit object from the tracked item
            </summary>
            <param name="context">The database context</param>
            <param name="trackObjectId">The tracking object id</param>
            <returns>The audit object</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.ITrackChildDomainRepository`2.NewFromAudit(`1)">
            <summary>
            Create object from audit object
            </summary>
            <param name="audit">The audit object</param>
            <returns>The domain object</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IUserRepository">
            <summary>
            Repository for tenant users
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IUserRepository.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.String)">
            <summary>
            Determine if the user existing by the identifier
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="identifier">The user identifier</param>
            <returns>True if the user with this identifier exists</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IUserRepository.UpdatePasswordAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Int32,System.String)">
            <summary>
            Change the user password
            </summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="userId">The user id</param>
            <param name="password">The new user password, use null to reset the password</param>
            <returns>True if the user with this identifier exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWageTypeAuditRepository">
            <summary>
            Repository for payroll wage type audits
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWageTypeCustomResultRepository">
            <summary>
            Repository for wage type custom results
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWageTypeRepository">
            <summary>
            Repository for wage types
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.IWageTypeRepository.ExistsAnyAsync(PayrollEngine.Domain.Model.IDbContext,System.Int32,System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Determine if any of the wage type identifiers are existing
            </summary>
            <param name="context">The database context</param>
            <param name="regulationId">The payroll regulation id</param>
            <param name="wageTypeNumbers">The wage type numbers</param>
            <returns>True if any wage type with this identifier exists</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWageTypeResultRepository">
            <summary>
            Repository for wage type results
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWageTypeResultSetRepository">
            <summary>
            Repository for wage type results
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.IWageTypeResultSetRepository.WageTypeCustomResultRepository">
            <summary>
            The wage type custom result repository
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWebhookMessageRepository">
            <summary>
            Repository for web hook messages
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.IWebhookRepository">
            <summary>
            Repository for webhooks
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Repository.PayrollValidator">
            <summary>Validator for <see cref="T:PayrollEngine.Domain.Model.Payroll"/></summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Repository.PayrollValidator.PayrollRepository">
            <summary>Gets the payroll repository</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.PayrollValidator.#ctor(PayrollEngine.Domain.Model.Repository.IPayrollRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.Repository.PayrollValidator"/> class.
            </summary>
            <param name="payrollRepository">"The payroll repository></param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Repository.PayrollValidator.ValidateRegulations(PayrollEngine.Domain.Model.IDbContext,System.Int32,PayrollEngine.Domain.Model.Payroll,System.DateTime,System.DateTime)">
            <summary>Validate payroll regulations</summary>
            <param name="context">The database context</param>
            <param name="tenantId">The tenant id</param>
            <param name="payroll">The payroll to validate</param>
            <param name="regulationDate">The regulation date</param>
            <param name="evaluationDate">The evaluation date</param>
        </member>
        <member name="T:PayrollEngine.Domain.Model.RetroPayrunJob">
            <summary>
            The retro payrun job
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RetroPayrunJob.ScheduleDate">
            <summary>
            The schedule date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.RetroPayrunJob.ResultTags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RetroPayrunJob.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RetroPayrunJob.#ctor(PayrollEngine.Domain.Model.RetroPayrunJob)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RetroPayrunJob.Equals(PayrollEngine.Domain.Model.RetroPayrunJob)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.RetroPayrunJob.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Script">
            <summary>
            A payroll script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Script.Name">
            <summary>
            The script name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Script.FunctionTypes">
            <summary>
            The scripting function types
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Script.FunctionTypeMask">
            <summary>
            The scripting function types
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Script.Value">
            <summary>
            The script value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Script.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Script.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Script.#ctor(PayrollEngine.Domain.Model.Script)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Script.Equals(PayrollEngine.Domain.Model.Script)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Script.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Script.FromAuditObject(PayrollEngine.Domain.Model.ScriptAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Script.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ScriptAudit">
            <summary>
            A payroll script audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAudit.ScriptId">
            <summary>
            The script id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAudit.Name">
            <summary>
            The script name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAudit.FunctionTypes">
            <summary>
            The scripting function types as bitmask
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAudit.FunctionTypeMask">
            <summary>
            The scripting function types
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAudit.Value">
            <summary>
            The script value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptAudit.#ctor(PayrollEngine.Domain.Model.ScriptAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptAudit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ScriptAuditDomainObject">
            <summary>
            Represents a script audit of a domain object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAuditDomainObject.Script">
            <summary>
            The expressions script
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAuditDomainObject.ScriptVersion">
            <summary>
            The script version
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAuditDomainObject.Binary">
            <summary>
            The binary data
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptAuditDomainObject.ScriptHash">
            <summary>
            The script hash value
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptAuditDomainObject.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptAuditDomainObject.#ctor(PayrollEngine.Domain.Model.ScriptAuditDomainObject)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.ScriptDomainObject">
            <summary>
            Represents an audit tracked domain object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptDomainObject.Script">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptDomainObject.ScriptVersion">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptDomainObject.Binary">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptDomainObject.ScriptHash">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptDomainObject.HasExpression">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptDomainObject.HasObjectScripts">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.#ctor(PayrollEngine.Domain.Model.ScriptDomainObject)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.Equals(PayrollEngine.Domain.Model.ScriptDomainObject)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.Clear">
            <summary>
            Get supported function types
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.GetFunctionTypes">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.GetEmbeddedScriptNames">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptDomainObject.GetFunctionScripts">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1">
            <summary>
            Represents an audit tracked domain object
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.Script">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.ScriptVersion">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.Binary">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.ScriptHash">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.HasExpression">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.HasObjectScripts">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.#ctor(PayrollEngine.Domain.Model.ScriptTrackDomainObject{`0})">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.Equals(PayrollEngine.Domain.Model.ScriptTrackDomainObject{`0})">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.Clear">
            <summary>
            Get supported function types
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.GetFunctionTypes">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.GetEmbeddedScriptNames">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.GetFunctionScripts">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.ScriptTrackDomainObject`1.FromAuditObject(`0)">
            <summary>
            Setup from audit object
            </summary>
            <returns>A new audit object instance</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.EnsureStart(System.String,System.String)">
            <summary>Ensures a start prefix</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to add</param>
            <returns>The string with prefix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.EnsureStart(System.String,System.String,System.StringComparison)">
            <summary>Ensures a start prefix</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to add</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string with prefix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>Ensures an ending suffix</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to add</param>
            <returns>The string with suffix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.EnsureEnd(System.String,System.String,System.StringComparison)">
            <summary>Ensures an ending suffix</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to add</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string with suffix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.RemoveFromStart(System.String,System.String)">
            <summary>Remove prefix from string</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to remove</param>
            <returns>The string without suffix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.RemoveFromStart(System.String,System.String,System.StringComparison)">
            <summary>Remove prefix from string</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to remove</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string without the starting prefix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.RemoveFromEnd(System.String,System.String)">
            <summary>Remove suffix from string</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to remove</param>
            <returns>The string without the ending suffix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.RemoveFromEnd(System.String,System.String,System.StringComparison)">
            <summary>Remove suffix from string</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to remove</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string without the ending suffix</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.ContainsCsvToken(System.String,System.String,System.Char)">
            <summary>Test for a cSV token</summary>
            <param name="source">The source value</param>
            <param name="token">The token to search</param>
            <param name="separator">The token separator</param>
            <returns>True if the token is available</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.GetScriptTags(System.String)">
            <summary>
            Extract the code tags from script
            Script tag example:
              /* #sealed */ MyScriptExpression
            </summary>
            <param name="script">The script</param>
            <returns>A list of code tags</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.StringExtensions.IsSealedScript(System.String)">
            <summary>
            Test if string is a sealed script
            </summary>
            <param name="script">The script</param>
            <returns>True if the script is sealed</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Task">
            <summary>
            A task
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.Name">
            <summary>
            The task name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.NameLocalizations">
            <summary>
            The localized task names (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.Category">
            <summary>
            The task category
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.Instruction">
            <summary>
            The task instruction
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.ScheduledUserId">
            <summary>
            The scheduled user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.Scheduled">
            <summary>
            The task schedule date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.CompletedUserId">
            <summary>
            The completed user id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.Completed">
            <summary>
            The task completed date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Task.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Task.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Task.#ctor(PayrollEngine.Domain.Model.Task)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Task.Equals(PayrollEngine.Domain.Model.Task)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Task.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Tenant">
            <summary>
            A payroll service tenant
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Tenant.Identifier">
            <summary>
            The unique identifier of the tenant (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Tenant.Culture">
            <summary>
            The culture
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Tenant.Calendar">
            <summary>
            The tenant calendar, fallback is the default calendar
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Tenant.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Tenant.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Tenant.#ctor(PayrollEngine.Domain.Model.Tenant)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Tenant.Equals(PayrollEngine.Domain.Model.Tenant)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Tenant.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.TrackDomainObject`1">
            <summary>
            Represents an audit tracked domain object
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.TrackDomainObject`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.TrackDomainObject`1.#ctor(PayrollEngine.Domain.Model.TrackDomainObject{`0})">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.TrackDomainObject`1.Equals(PayrollEngine.Domain.Model.TrackDomainObject{`0})">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.TrackDomainObject`1.ToAuditObject">
            <summary>
            Create new audit object
            </summary>
            <returns>A new audit object instance</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.TrackDomainObject`1.FromAuditObject(`0)">
            <summary>
            Setup from audit object
            </summary>
            <returns>A new audit object instance</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.User">
            <summary>
            A payroll user
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.Identifier">
            <summary>
            The user unique identifier
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.Password">
            <summary>
            The user password
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.StoredSalt">
            <summary>
            The password salt
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.FirstName">
            <summary>
            The first name of the user
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.LastName">
            <summary>
            The last name of the user
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.Culture">
            <summary>
            The users culture
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.Language">
            <summary>
            The users language
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.UserType">
            <summary>
            The user type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.User.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.User.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.User.#ctor(PayrollEngine.Domain.Model.User)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.User.Equals(PayrollEngine.Domain.Model.User)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.User.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.CaseFieldSetExtensions">
            <summary>Extension methods for the <see cref="T:PayrollEngine.Domain.Model.CaseFieldSet"/></summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.CaseFieldSetExtensions.IsComplete(PayrollEngine.Domain.Model.CaseFieldSet)">
            <summary>Test for complete case field</summary>
            <param name="caseFieldSet">The derived case field to test</param>
            <returns>True if the case field is complete,  otherwise false</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageType">
            <summary>
            A payroll wage type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.WageTypeNumber">
            <summary>
            The wage type number (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.Name">
            <summary>
            The wage type name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.NameLocalizations">
            <summary>
            The localized wage type names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.Description">
            <summary>
            The wage type description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.DescriptionLocalizations">
            <summary>
            The localized wage type descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.ValueType">
            <summary>
            The value type, default is value type money
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.CalendarCalculationMode">
            <summary>
            The calendar calculation mode (default: tenant value)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.Collectors">
            <summary>
            Associated collectors
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.CollectorGroups">
            <summary>
            Associated collector groups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.ValueExpression">
            <summary>
            Expression: calculates of the wage type value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.ResultExpression">
            <summary>
            Expression: calculates of the wage type result attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.Clusters">
            <summary>
            The wage type clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.#ctor(PayrollEngine.Domain.Model.WageType)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.Equals(PayrollEngine.Domain.Model.WageType)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.ToAuditObject">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.FromAuditObject(PayrollEngine.Domain.Model.WageTypeAudit)">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.HasExpression">
            <inheritdoc/>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageType.HasObjectScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.GetFunctionTypes">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.GetFunctionScripts">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.GetEmbeddedScriptNames">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageTypeAudit">
            <summary>
            A payroll wage type audit
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.WageTypeId">
            <summary>
            The wage type id
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.WageTypeNumber">
            <summary>
            The wage type number
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.Name">
            <summary>
            The wage type name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.NameLocalizations">
            <summary>
            The localized wage type names
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.Description">
            <summary>
            The wage type description
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.DescriptionLocalizations">
            <summary>
            The localized wage type descriptions
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.OverrideType">
            <summary>
            The override type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.ValueType">
            <summary>
            The value type
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.CalendarCalculationMode">
            <summary>
            The calendar calculation mode (default: tenant value)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.Collectors">
            <summary>
            Associated collectors
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.CollectorGroups">
            <summary>
            Associated collector groups
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.ValueExpression">
            <summary>
            Expression: calculates of the wage type value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.ResultExpression">
            <summary>
            Expression: calculates of the wage type result attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeAudit.Clusters">
            <summary>
            The wage type clusters
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeAudit.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeAudit.#ctor(PayrollEngine.Domain.Model.WageTypeAudit)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeAudit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageTypeCustomResult">
            <summary>
            A wage type custom result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.WageTypeResultId">
            <summary>
            The wage type result id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.WageTypeNumber">
            <summary>
            The wage type number (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.WageTypeName">
            <summary>
            The wage type name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.WageTypeNameLocalizations">
            <summary>
            The localized wage type names (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.Source">
            <summary>
            The value source (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.ValueType">
            <summary>
            The value type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.Value">
            <summary>
            The wage type custom result value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.Start">
            <summary>
            The period starting date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.StartHash">
            <summary>
            The starting date hash code (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.End">
            <summary>
            The period ending date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.Tags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeCustomResult.Attributes">
            <summary>
            The result attributes (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeCustomResult.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeCustomResult.#ctor(PayrollEngine.Domain.Model.WageTypeCustomResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeCustomResult.Equals(PayrollEngine.Domain.Model.WageTypeCustomResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeCustomResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageTypeExtensions">
            <summary>
            Extension methods for <see cref="T:PayrollEngine.Domain.Model.WageType"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeExtensions.CollectorAvailable(PayrollEngine.Domain.Model.WageType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get offset period
            </summary>
            <param name="wageType">The wage type</param>
            <param name="collectorName">The collector name</param>
            <param name="collectorGroups">The collector groups</param>
            <returns>Offset period</returns>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageTypeResult">
            <summary>
            A wage type result
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.PayrollResultId">
            <summary>
            The payroll result id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.WageTypeId">
            <summary>
            The wage type id (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.WageTypeNumber">
            <summary>
            The wage type number (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.WageTypeName">
            <summary>
            The wage type name (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.WageTypeNameLocalizations">
            <summary>
            The localized wage type names (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.ValueType">
            <summary>
            The value type (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.Value">
            <summary>
            The wage type result value (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.Start">
            <summary>
            The starting date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.StartHash">
            <summary>
            The starting date hash code (immutable)
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.End">
            <summary>
            The ending date for the value
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.Tags">
            <summary>
            The result tags
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResult.Attributes">
            <summary>
            The result attributes (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResult.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResult.#ctor(PayrollEngine.Domain.Model.WageTypeResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResult.Equals(PayrollEngine.Domain.Model.WageTypeResult)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageTypeResultQuery">
            <summary>
            Wage type result query
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResultQuery.WageTypeNumbers">
            <summary>The wage type numbers</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultQuery.#ctor(PayrollEngine.Domain.Model.WageTypeResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultQuery.#ctor(PayrollEngine.Domain.Model.PayrollResultQuery)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WageTypeResultSet">
            <summary>
            A wage type result set
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WageTypeResultSet.CustomResults">
            <summary>
            The wage type custom results (immutable)
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultSet.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultSet.#ctor(PayrollEngine.Domain.Model.WageTypeResult)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultSet.#ctor(PayrollEngine.Domain.Model.WageTypeResultSet)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultSet.Equals(PayrollEngine.Domain.Model.WageTypeResultSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WageTypeResultSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.Webhook">
            <summary>
            A webhook
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Webhook.Name">
            <summary>
            The webhook name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Webhook.ReceiverAddress">
            <summary>
            The webhook receiver address
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Webhook.Action">
            <summary>
            The webhook action
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.Webhook.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Webhook.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Webhook.#ctor(PayrollEngine.Domain.Model.Webhook)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Webhook.Equals(PayrollEngine.Domain.Model.Webhook)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.Webhook.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WebhookDispatchMessage">
            <summary>
            Webhook dispatch message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookDispatchMessage.Action">
            <summary>
            The webhook action
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookDispatchMessage.RequestMessage">
            <summary>
            The request message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookDispatchMessage.RequestOperation">
            <summary>
            The request operation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookDispatchMessage.TrackMessage">
            <summary>
            Webhook tracking option
            </summary>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WebhookMessage">
            <summary>
            Webhook message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.ActionName">
            <summary>
            The webhook action name
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.ReceiverAddress">
            <summary>
            The webhook receiver address
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.RequestDate">
            <summary>
            The request date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.RequestMessage">
            <summary>
            The request message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.RequestOperation">
            <summary>
            The request operation
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.ResponseDate">
            <summary>
            The response date
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.ResponseStatus">
            <summary>
            The response HTTP status code
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookMessage.ResponseMessage">
            <summary>
            The response message
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookMessage.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookMessage.#ctor(PayrollEngine.Domain.Model.WebhookMessage)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookMessage.Equals(PayrollEngine.Domain.Model.WebhookMessage)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WebhookRuntimeMessage">
            <summary>
            Webhook runtime message
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookRuntimeMessage.Tenant">
            <summary>
            The tenant identifier
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WebhookRuntimeMessage.User">
            <summary>
            The user identifier
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookRuntimeMessage.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookRuntimeMessage.#ctor(PayrollEngine.Domain.Model.WebhookMessage,System.String,System.String)">
            <summary>
            Webhook message Copy constructor
            </summary>
            <param name="copySource">The source to copy</param>
            <param name="tenant">The tenant identifier</param>
            <param name="user">The user identifier</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookRuntimeMessage.#ctor(PayrollEngine.Domain.Model.WebhookRuntimeMessage)">
            <summary>
            Copy constructor
            </summary>
            <param name="copySource">The source to copy</param>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookRuntimeMessage.Equals(PayrollEngine.Domain.Model.WebhookRuntimeMessage)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WebhookRuntimeMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Domain.Model.WeekDayPayrollCalculator">
            <summary>Case value calculator by week calendar days</summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WeekDayPayrollCalculator.WorkingDays">
            <summary>List of working days</summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekDayPayrollCalculator.#ctor(PayrollEngine.IPayrollCalendar)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekDayPayrollCalculator.GetPayrunPeriod(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekDayPayrollCalculator.GetPayrunCycle(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekDayPayrollCalculator.CalculateValue(PayrollEngine.Domain.Model.CaseValueCalculation)">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.WeekPayrollPeriod">
            <summary>
            Payroll week period
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WeekPayrollPeriod.Calendar">
            <summary>
            The date calendar
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WeekPayrollPeriod.WeekOfYear">
            <summary>
            Gets the week of year
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekPayrollPeriod.#ctor(PayrollEngine.IPayrollCalendar,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekPayrollPeriod.#ctor(PayrollEngine.IPayrollCalendar,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.WeekPayrollPeriod"/> class
            </summary>
            <param name="calendar">The calendar</param>
            <param name="moment">The moment</param>
        </member>
        <member name="P:PayrollEngine.Domain.Model.WeekPayrollPeriod.Start">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.WeekPayrollPeriod.End">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.WeekPayrollPeriod.Name">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekPayrollPeriod.GetPayrollPeriod(System.DateTime,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.WeekPayrollPeriod.ToString">
            <inheritdoc />
        </member>
        <member name="T:PayrollEngine.Domain.Model.YearPayrollCycle">
            <summary>
            Payroll year cycle
            </summary>
        </member>
        <member name="P:PayrollEngine.Domain.Model.YearPayrollCycle.Calendar">
            <summary>
            The date calendar
            </summary>
        </member>
        <member name="M:PayrollEngine.Domain.Model.YearPayrollCycle.#ctor(PayrollEngine.IPayrollCalendar,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.YearPayrollCycle.#ctor(PayrollEngine.IPayrollCalendar,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Domain.Model.YearPayrollCycle"/> class
            </summary>
            <param name="calendar">The calendar</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
        </member>
        <member name="P:PayrollEngine.Domain.Model.YearPayrollCycle.Start">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.YearPayrollCycle.End">
            <inheritdoc />
        </member>
        <member name="P:PayrollEngine.Domain.Model.YearPayrollCycle.Name">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.YearPayrollCycle.GetPayrollPeriod(System.DateTime,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PayrollEngine.Domain.Model.YearPayrollCycle.ToString">
            <inheritdoc />
        </member>
    </members>
</doc>
